?group_by
group_by(subset_of_interest, group)
View(group_by(subset_of_interest, group))
score_percentage
?aggregate
aggregate(used_script_digital ~ group, data=subset_of_interest, mean)
aggregate(score_percentage ~ group, data=subset_of_interest, mean, na.rm = TRUE)
?lapply
lapply(x = c(1,2,3), sum(x, 1))
lapply(x = c(1,2,3), FUN = sum(x, 1))
lapply(x = c(1,2,3), FUN = sum)
lapply(X = c(1,2,3), FUN = sum(X, 1))
lapply(X = c(1,2,3), FUN = sum(x = x, 1))
my_sum <-  function(x){sum(x, 1)}
my_sum(1)
lapply(X = c(1,2,3), FUN = my_sum(x =x))
lapply(x = c(1,2,3), FUN = my_sum(x =x))
lapply(x = c(1,2,3), FUN = my_sum)
lapply(X = c(1,2,3), FUN = my_sum)
lapply(c(1,2,3), FUN = my_sum)
sapply(c(1, 2, 3), function(x) sum(x, 1))
sapply(x = c(1, 2, 3), function(x) sum(x, 1))
sapply(X = c(1, 2, 3), function(x) sum(x, 1))
variables_of_interest <- c("group", "used_script_digital", "used_script_physical", "used_textbook", "used_guideline",
"used_anki_institute", "used_anki_custom") # declare variables for line graph
#options ignored: moodle quiz, moodle task, other
subset_of_interest <- survey_data[variables_of_interest]
####### install all required packages
required_packages <- c("gt", "readxl","tidyverse", "grDevices", "ggpubr", "effsize", "superb", "nlme")
installed_packages <- required_packages %in% rownames(installed.packages())
if (any(installed_packages == FALSE)) {
install.packages(required_packages[!installed_packages])
}
invisible(lapply(required_packages, library, character.only = TRUE))
survey_data <- tibble(read_xlsx("data/processed/anki_data_comprehensive.xlsx")) # read survey data with all five groups
students_per_group <- c(196, 107, 111, 266, 232) # number of students who wrote the exam in each group (excluding students absent from the exam). Data taken from score reports for each exam.
groups <- unique(survey_data$group) # vector of different groups
respondents <- table(survey_data$group) # before: ...[groups], but why? create table of group frequencies and sort them by vector "groups". Otherwise, columns will be sorted by alphabet
response_rate <-  round(100*respondents/students_per_group, 2) # create table of response rates in percentages
gender_table <- table(survey_data$group, survey_data$gender)[groups,] # create table of declared gender per group (1 = male, 2 = female, 3 = diverse or not declared)
gender_undeclared <- respondents - rowSums(gender_table) # get no of students who did not declare gender in each group
gender_table[,3] <- gender_table[,3] + gender_undeclared # add no of undeclared genders per group to gender table. row "3" now comprises both students of answered diverse, or who did not answer the question at all.
score_percentages_means <- aggregate(score_percentage ~ group, data=survey_data, mean) # create df of mean score percentages by group
score_percentages_means_sorted <- score_percentages_means[match(groups, score_percentages_means$group), ]
score_percentages_sds <- aggregate(score_percentage ~ group, data=survey_data, sd) # create df of score percentage standard deviations by group
score_percentages_sds_sorted <- score_percentages_sds[match(groups, score_percentages_sds$group), ]
score_percentages_means_sds <- paste(round(score_percentages_means_sorted[,2], 2), "\u00B1", round(score_percentages_sds_sorted[,2], 2)) # paste means +/- sds after rounding to 2 digits
descriptive_df <- data.frame(respondents = as.vector(respondents), # create data frame with all important descriptive data
response_rate = as.vector(response_rate),
score_percentages_means = score_percentages_means_sorted[, 2],
score_percentages_sds = score_percentages_sds_sorted[, 2],
as.data.frame.matrix(gender_table))
descriptive_df["totals", ] <- c(sum(respondents), # add bottom row with totals over all seminar and lecture exams
100 * sum(respondents) / sum(students_per_group),
mean(survey_data$score_percentage, na.rm = TRUE),
sd(survey_data$score_percentage, na.rm = TRUE),
sum(survey_data$gender == 1, na.rm = TRUE),
sum(survey_data$gender == 2, na.rm = TRUE),
sum(respondents) - sum(survey_data$gender == 1, na.rm = TRUE) -
sum(survey_data$gender == 2, na.rm = TRUE)
)
score_percentages_means_sds <- paste(round(c(score_percentages_means_sorted[,2],mean(survey_data$score_percentage, na.rm = TRUE)), 2),
"\u00B1",
round(c(score_percentages_sds_sorted[,2],sd(survey_data$score_percentage, na.rm = TRUE)), 2)) # paste means +/- sds after rounding to 2 digits
descriptive_df_processed <- descriptive_df[,-c(3,4)] # percentage means and sds converted to char and combined as mean +- sd
descriptive_df_processed$means_and_sds <- score_percentages_means_sds
descriptive_df_processed$response_rate <- round(descriptive_df_processed$response_rate, 2)
rownames(descriptive_df_processed) <- c("Seminar 2022", "Lecture 2022", "Seminar 2022/23", "Lecture 2022/23", "Seminar 2023", "Totals")
descriptive_tbl <- as_tibble(cbind(nms = names(descriptive_df_processed), t(descriptive_df_processed))) # transpose and convert to tibble object
row_names <- c("Respondents [n]", "Response rate [%]", "Male", "Female", "Non-binary or refused to disclose", "Mean percentage of correct anwers [%] \u00B1 standard deviation") # expressive row names esp. for gender options
descriptive_tbl$nms = row_names # fill first column in descriptive_tbl with row names
descriptive_tbl_gt <- gt(descriptive_tbl, rowname_col = "nms") # create gt object with $nms as row names
indented_rows <- c("Male", "Female", "Non-binary or refused to disclose") # define rows to be indented (gender rows)
descriptive_tbl_gt <- tab_row_group(descriptive_tbl_gt, label = "Gender",  rows = indented_rows) # create gt_tbl object, label Gender rows for grouping and indenting
descriptive_tbl_gt <- tab_stub_indent(descriptive_tbl_gt, rows= indented_rows, indent = 3) # indent Gender rows
descriptive_tbl_gt <- row_group_order(descriptive_tbl_gt, groups = c(NA, "Gender")) # reorder groups with Gender being on the bottom
tab_header(descriptive_tbl_gt, "Subject characteristics")
descriptive_tbl_gt <- tab_style( # make column total in bold
descriptive_tbl_gt,
style = cell_text(weight = "bold"),
locations = cells_body(columns = Totals)
)
descriptive_tbl_gt <- tab_style( # make column name "Totals" in bold as well
descriptive_tbl_gt,
style = cell_text(weight = "bold"),
locations = cells_column_labels(columns = Totals)
)
descriptive_tbl_gt
survey_data <- tibble(read_xlsx("data/processed/anki_data_comprehensive.xlsx")) # read survey data with all five groups
students_per_group <- c(196, 107, 111, 266, 232) # number of students who wrote the exam in each group (excluding students absent from the exam). Data taken from score reports for each exam.
groups <- unique(survey_data$group) # vector of different groups
respondents <- table(survey_data$group) # before: ...[groups], but why? create table of group frequencies and sort them by vector "groups". Otherwise, columns will be sorted by alphabet
response_rate <-  round(100*respondents/students_per_group, 2) # create table of response rates in percentages
gender_table <- table(survey_data$group, survey_data$gender)[groups,] # create table of declared gender per group (1 = male, 2 = female, 3 = diverse or not declared)
gender_undeclared <- respondents - rowSums(gender_table) # get no of students who did not declare gender in each group
gender_table[,3] <- gender_table[,3] + gender_undeclared # add no of undeclared genders per group to gender table. row "3" now comprises both students of answered diverse, or who did not answer the question at all.
gender_table
survey_data$gender
gender_table
table(survey_data$group, survey_data$gender)
table(survey_data$group, survey_data$gender)[groups,]
gender_table <- table(survey_data$group, survey_data$gender)[groups,] # create table of declared gender per group (1 = male, 2 = female, 3 = diverse or not declared)
gender_table
survey_data$gender
sum(survey_data$gender == 1)
sum(survey_data$gender == 1, na.rm = TRUE)
sum(survey_data$gender == 2, na.rm = TRUE)
sum(survey_data$gender == 3, na.rm = TRUE)
sum(survey_data$gender == NA, na.rm = TRUE)
sum(survey_data$gender == NA, na.rm = FALSE)
NA_vector <- c(NA, NA)
NA_vector
NA_vector == NA
is.na(NA_vector)
####### install all required packages
required_packages <- c("gt", "readxl","tidyverse", "grDevices", "ggpubr", "effsize", "superb", "nlme")
installed_packages <- required_packages %in% rownames(installed.packages())
if (any(installed_packages == FALSE)) {
install.packages(required_packages[!installed_packages])
}
invisible(lapply(required_packages, library, character.only = TRUE))
survey_data <- tibble(read_xlsx("data/processed/anki_data_comprehensive.xlsx")) # read survey data with all five groups
students_per_group <- c(196, 107, 111, 266, 232) # number of students who wrote the exam in each group (excluding students absent from the exam). Data taken from score reports for each exam.
groups <- unique(survey_data$group) # vector of different groups
respondents <- table(survey_data$group) # before: ...[groups], but why? create table of group frequencies and sort them by vector "groups". Otherwise, columns will be sorted by alphabet
respondents
response_rate <-  round(100*respondents/students_per_group, 2) # create table of response rates in percentages
response_rate
students_per_group <- c(196, 107, 111, 266, 232) # number of students who wrote the exam in each group (excluding students absent from the exam). Data taken from score reports for each exam.
groups <- unique(survey_data$group) # vector of different groups
respondents <- table(survey_data$group)[groups,] # create table of group frequencies and sort them by vector "groups". Otherwise, columns will be sorted by alphabet
response_rate <-  round(100*respondents/students_per_group, 2) # create table of response rates in percentages
gender_table <- table(survey_data$group, survey_data$gender)[groups,] # create table of declared gender per group (1 = male, 2 = female, 3 = diverse or not declared)
gender_undeclared <- respondents - rowSums(gender_table) # get no of students who did not declare gender in each group
gender_table[,3] <- gender_table[,3] + gender_undeclared # add no of undeclared genders per group to gender table. row "3" now comprises both students of answered diverse, or who did not answer the question at all.
score_percentages_means <- aggregate(score_percentage ~ group, data=survey_data, mean) # create df of mean score percentages by group
score_percentages_means_sorted <- score_percentages_means[match(groups, score_percentages_means$group), ]
score_percentages_sds <- aggregate(score_percentage ~ group, data=survey_data, sd) # create df of score percentage standard deviations by group
score_percentages_sds_sorted <- score_percentages_sds[match(groups, score_percentages_sds$group), ]
score_percentages_means_sds <- paste(round(score_percentages_means_sorted[,2], 2), "\u00B1", round(score_percentages_sds_sorted[,2], 2)) # paste means +/- sds after rounding to 2 digits
descriptive_df <- data.frame(respondents = as.vector(respondents), # create data frame with all important descriptive data
response_rate = as.vector(response_rate),
score_percentages_means = score_percentages_means_sorted[, 2],
score_percentages_sds = score_percentages_sds_sorted[, 2],
as.data.frame.matrix(gender_table))
descriptive_df["totals", ] <- c(sum(respondents), # add bottom row with totals over all seminar and lecture exams
100 * sum(respondents) / sum(students_per_group),
mean(survey_data$score_percentage, na.rm = TRUE),
sd(survey_data$score_percentage, na.rm = TRUE),
sum(survey_data$gender == 1, na.rm = TRUE),
sum(survey_data$gender == 2, na.rm = TRUE),
sum(respondents) - sum(survey_data$gender == 1, na.rm = TRUE) -
sum(survey_data$gender == 2, na.rm = TRUE)
)
score_percentages_means_sds <- paste(round(c(score_percentages_means_sorted[,2],mean(survey_data$score_percentage, na.rm = TRUE)), 2),
"\u00B1",
round(c(score_percentages_sds_sorted[,2],sd(survey_data$score_percentage, na.rm = TRUE)), 2)) # paste means +/- sds after rounding to 2 digits
descriptive_df_processed <- descriptive_df[,-c(3,4)] # percentage means and sds converted to char and combined as mean +- sd
descriptive_df_processed$means_and_sds <- score_percentages_means_sds
descriptive_df_processed$response_rate <- round(descriptive_df_processed$response_rate, 2)
rownames(descriptive_df_processed) <- c("Seminar 2022", "Lecture 2022", "Seminar 2022/23", "Lecture 2022/23", "Seminar 2023", "Totals")
descriptive_tbl <- as_tibble(cbind(nms = names(descriptive_df_processed), t(descriptive_df_processed))) # transpose and convert to tibble object
row_names <- c("Respondents [n]", "Response rate [%]", "Male", "Female", "Non-binary or refused to disclose", "Mean percentage of correct anwers [%] \u00B1 standard deviation") # expressive row names esp. for gender options
descriptive_tbl$nms = row_names # fill first column in descriptive_tbl with row names
descriptive_tbl_gt <- gt(descriptive_tbl, rowname_col = "nms") # create gt object with $nms as row names
indented_rows <- c("Male", "Female", "Non-binary or refused to disclose") # define rows to be indented (gender rows)
descriptive_tbl_gt <- tab_row_group(descriptive_tbl_gt, label = "Gender",  rows = indented_rows) # create gt_tbl object, label Gender rows for grouping and indenting
descriptive_tbl_gt <- tab_stub_indent(descriptive_tbl_gt, rows= indented_rows, indent = 3) # indent Gender rows
descriptive_tbl_gt <- row_group_order(descriptive_tbl_gt, groups = c(NA, "Gender")) # reorder groups with Gender being on the bottom
tab_header(descriptive_tbl_gt, "Subject characteristics")
descriptive_tbl_gt <- tab_style( # make column total in bold
descriptive_tbl_gt,
style = cell_text(weight = "bold"),
locations = cells_body(columns = Totals)
)
descriptive_tbl_gt <- tab_style( # make column name "Totals" in bold as well
descriptive_tbl_gt,
style = cell_text(weight = "bold"),
locations = cells_column_labels(columns = Totals)
)
descriptive_tbl_gt
####### install all required packages
required_packages <- c("gt", "readxl","tidyverse", "grDevices", "ggpubr", "effsize", "superb", "nlme")
installed_packages <- required_packages %in% rownames(installed.packages())
if (any(installed_packages == FALSE)) {
install.packages(required_packages[!installed_packages])
}
invisible(lapply(required_packages, library, character.only = TRUE))
survey_data <- tibble(read_xlsx("data/processed/anki_data_comprehensive.xlsx")) # read survey data with all five groups
students_per_group <- c(196, 107, 111, 266, 232) # number of students who wrote the exam in each group (excluding students absent from the exam). Data taken from score reports for each exam.
groups <- unique(survey_data$group) # vector of different groups
respondents <- table(survey_data$group)[groups,] # create table of group frequencies and sort them by vector "groups". Otherwise, columns will be sorted by alphabet
response_rate <-  round(100*respondents/students_per_group, 2) # create table of response rates in percentages
response_rate
students_per_group <- c(196, 107, 111, 266, 232) # number of students who wrote the exam in each group (excluding students absent from the exam). Data taken from score reports for each exam.
groups <- unique(survey_data$group) # vector of different groups
respondents <- table(survey_data$group)[groups,] # create table of group frequencies and sort them by vector "groups". Otherwise, columns will be sorted by alphabet
response_rate <-  round(100*respondents/students_per_group, 2) # create table of response rates in percentages
groups
respondents <- table(survey_data$group)[groups,] # create table of group frequencies and sort them by vector "groups". Otherwise, columns will be sorted by alphabet
table(survey_data$group)
respondents <- table(survey_data$group)[groups] # create table of group frequencies and sort them by vector "groups". Otherwise, columns will be sorted by alphabet
respondents
response_rate <-  round(100*respondents/students_per_group, 2) # create table of response rates in percentages
response_rate
gender_table <- table(survey_data$group, survey_data$gender)[groups,] # create table of declared gender per group (1 = male, 2 = female, 3 = diverse or not declared)
gender_undeclared <- respondents - rowSums(gender_table) # get no of students who did not declare gender in each group
gender_table[,3] <- gender_table[,3] + gender_undeclared # add no of undeclared genders per group to gender table. row "3" now comprises both students of answered diverse, or who did not answer the question at all.
gender_table
score_percentages_means <- aggregate(score_percentage ~ group, data=survey_data, mean) # create df of mean score percentages by group
score_percentages_means_sorted <- score_percentages_means[match(groups, score_percentages_means$group), ]
score_percentages_sds <- aggregate(score_percentage ~ group, data=survey_data, sd) # create df of score percentage standard deviations by group
score_percentages_sds_sorted <- score_percentages_sds[match(groups, score_percentages_sds$group), ]
score_percentages_means_sds <- paste(round(score_percentages_means_sorted[,2], 2), "\u00B1", round(score_percentages_sds_sorted[,2], 2)) # paste means +/- sds after rounding to 2 digits
descriptive_df <- data.frame(respondents = as.vector(respondents), # create data frame with all important descriptive data
response_rate = as.vector(response_rate),
score_percentages_means = score_percentages_means_sorted[, 2],
score_percentages_sds = score_percentages_sds_sorted[, 2],
as.data.frame.matrix(gender_table))
descriptive_df["totals", ] <- c(sum(respondents), # add bottom row with totals over all seminar and lecture exams
100 * sum(respondents) / sum(students_per_group),
mean(survey_data$score_percentage, na.rm = TRUE),
sd(survey_data$score_percentage, na.rm = TRUE),
sum(survey_data$gender == 1, na.rm = TRUE),
sum(survey_data$gender == 2, na.rm = TRUE),
sum(respondents) - sum(survey_data$gender == 1, na.rm = TRUE) -
sum(survey_data$gender == 2, na.rm = TRUE)
)
score_percentages_means_sds <- paste(round(c(score_percentages_means_sorted[,2],mean(survey_data$score_percentage, na.rm = TRUE)), 2),
"\u00B1",
round(c(score_percentages_sds_sorted[,2],sd(survey_data$score_percentage, na.rm = TRUE)), 2)) # paste means +/- sds after rounding to 2 digits
descriptive_df_processed <- descriptive_df[,-c(3,4)] # percentage means and sds converted to char and combined as mean +- sd
descriptive_df_processed$means_and_sds <- score_percentages_means_sds
descriptive_df_processed$response_rate <- round(descriptive_df_processed$response_rate, 2)
rownames(descriptive_df_processed) <- c("Seminar 2022", "Lecture 2022", "Seminar 2022/23", "Lecture 2022/23", "Seminar 2023", "Totals")
descriptive_tbl <- as_tibble(cbind(nms = names(descriptive_df_processed), t(descriptive_df_processed))) # transpose and convert to tibble object
row_names <- c("Respondents [n]", "Response rate [%]", "Male", "Female", "Non-binary or refused to disclose", "Mean percentage of correct anwers [%] \u00B1 standard deviation") # expressive row names esp. for gender options
descriptive_tbl$nms = row_names # fill first column in descriptive_tbl with row names
descriptive_tbl_gt <- gt(descriptive_tbl, rowname_col = "nms") # create gt object with $nms as row names
indented_rows <- c("Male", "Female", "Non-binary or refused to disclose") # define rows to be indented (gender rows)
descriptive_tbl_gt <- tab_row_group(descriptive_tbl_gt, label = "Gender",  rows = indented_rows) # create gt_tbl object, label Gender rows for grouping and indenting
descriptive_tbl_gt <- tab_stub_indent(descriptive_tbl_gt, rows= indented_rows, indent = 3) # indent Gender rows
descriptive_tbl_gt <- row_group_order(descriptive_tbl_gt, groups = c(NA, "Gender")) # reorder groups with Gender being on the bottom
tab_header(descriptive_tbl_gt, "Subject characteristics")
descriptive_tbl_gt <- tab_style( # make column total in bold
descriptive_tbl_gt,
style = cell_text(weight = "bold"),
locations = cells_body(columns = Totals)
)
descriptive_tbl_gt <- tab_style( # make column name "Totals" in bold as well
descriptive_tbl_gt,
style = cell_text(weight = "bold"),
locations = cells_column_labels(columns = Totals)
)
variables_of_interest <- c("group", "used_script_digital", "used_script_physical", "used_textbook", "used_guideline",
"used_anki_institute", "used_anki_custom") # declare variables for line graph
#options ignored: moodle quiz, moodle task, other
subset_of_interest <- survey_data[variables_of_interest]
aggregate(used_script_digital ~ group, data=subset_of_interest, mean, rm)
variables_of_interest <- c("group", "used_script_digital", "used_script_physical", "used_textbook", "used_guideline",
"used_anki_institute", "used_anki_custom") # declare variables for line graph
#options ignored: moodle quiz, moodle task, other
subset_of_interest <- survey_data[variables_of_interest]
subset_of_interest
aggregate(used_script_digital ~ group, data=subset_of_interest, mean, na.rm = TRUE)
aggregate(used_script_digital ~ group, data=subset_of_interest, mean, na.rm = TRUE)[groups,]
?groups
groups
#options ignored: moodle quiz, moodle task, other
subset_of_interest <- survey_data[variables_of_interest]
aggregate(used_script_digital ~ group, data=subset_of_interest, mean, na.rm = TRUE)
share_used_script_digital <- aggregate(used_script_digital ~ group, data=subset_of_interest, mean, na.rm = TRUE)
share_used_script_digital
share_used_script_digital["lecture_22"]
share_used_script_digital["lecture_22",]
class(share_used_script_digital)
share_used_script_digital
share_used_script_digital[1,]
share_used_script_digital["gjj",]
share_used_script_digital[lecture_22,]
2 %>% sum(1)
share_used_script_digital$group
which(share_used_script_digital$group == groups)
match(share_used_script_digital$group == groups)
?match
match(groups, share_used_script_digital$group)
share_used_script_digital$group
share_used_script_digital <- aggregate(used_script_digital ~ group, data=subset_of_interest, mean, na.rm = TRUE)[
match(groups, share_used_script_digital$group),
]
share_used_script_digital
subset_of_interest
variables_of_interest
share_used_script_digital <- aggregate("used_script_digital" ~ group, data=subset_of_interest, mean, na.rm = TRUE)[
match(groups, share_used_script_digital$group),
] # gives share of students who used physical scripts per group and in total
as.factor(variables_of_interest[1])
share_used_script_digital <- aggregate(as.factor(variables_of_interest[2]) ~ group, data=subset_of_interest, mean, na.rm = TRUE)[
match(groups, share_used_script_digital$group),
] # gives share of students who used physical scripts per group and in total
?factor
share_used_script_digital <- aggregate(used_script_digital ~ group, data=subset_of_interest, mean, na.rm = TRUE)[
match(groups, share_used_script_digital$group),
] # gives share of students who used physical scripts per group and in total
share_used_script_digital
factor(variables_of_interest)
lapply(X = factor(variables_of_interest),
aggregate(X ~ group, data=subset_of_interest, mean, na.rm = TRUE)[
match(groups, share_used_script_digital$group),
]) #
lapply(X = factor(variables_of_interest),
aggregate(x ~ group, data=subset_of_interest, mean, na.rm = TRUE)[
match(groups, share_used_script_digital$group),
]) #
myfun <- function(arg1, arg2){arg1 + arg2 + 42}
myfun(1,2)
lapply(arg1, myfun, arg2)
arg1 <- c(1, 2, 3)
arg2 <- 10
lapply(arg1, myfun, arg2)
lapply(arg1 = arg1, myfun, arg2 = arg2)
lapply(arg1 = arg1, FUN = myfun, arg2 = arg2)
lapply(X = arg1, FUN = myfun, arg2 = arg2)
lapply(arg1 = arg1, FUN = myfun, X = arg2)
arg1
arg1[2:]
arg1[2:end]
arg1[2:5]
?aggregate
factor(variables_of_interest)[-1]
factor(variables_of_interest)[-1]
test <- factor(variables_of_interest)[-1]
test[1]
test[1,1]
survey_data$test[1]
test[1]
survey$data
survey_data
survey_data$test[1]
survey_data$test
test
hello <- test[1]
hello
survey_data$hello
survey_data[1, "used_script_digital"]
survey_data[, "used_script_digital"]
survey_data$"used_script_digital"
survey_data$used_script_digital
lapply(factor(variables_of_interest)[-1],
aggregate(x ~ group, data=subset_of_interest, mean, na.rm = TRUE)[
match(groups, share_used_script_digital$group),
]) #
lapply(factor(variables_of_interest)[-1],
aggregate(. ~ group, data=subset_of_interest, mean, na.rm = TRUE)[
match(groups, share_used_script_digital$group),
]) #
lapply(X = factor(variables_of_interest)[-1],
aggregate(X ~ group, data=subset_of_interest, mean, na.rm = TRUE)[
match(groups, share_used_script_digital$group),
]) #
lapply(factor(variables_of_interest)[-1],
aggregate( ~ group, data=subset_of_interest, mean, na.rm = TRUE)[
match(groups, share_used_script_digital$group),
]) #
variables_of_interest
cols <- names(subset_of_interest)[2:7]
cols
results <- lapply(cols, function(col) aggregate(as.formula(paste(col, "~ group")), data = subset_of_interest, mean))
results
str(results)
unlist(results)
results
str(unlist(results))
class(unlist(results))
type(unlist(results))
lapply(results, function(x) setNames(x[2], x$group))
results <- lapply(cols, function(col) {
aggregate(as.formula(paste(col, "~ group")), data = subset_of_interest, mean)
})
results
# Combine the results into a single data frame
combined <- do.call(rbind, lapply(results, function(x) setNames(x[2], x$group)))
# Column names to iterate over, excluding 'group'
cols <- names(subset_of_interest)[2:7]
# Column names to iterate over, excluding 'group'
cols <- names(subset_of_interest)[2:7]
# Extract unique group names to ensure consistency
group_names <- unique(subset_of_interest$group)
# Use lapply to compute the aggregate means for each column and ensure consistent groups
results <- lapply(cols, function(col) {
# Aggregate the data
agg_result <- aggregate(as.formula(paste(col, "~ group")), data = subset_of_interest, mean)
# Ensure that all groups are present by merging with the full group list
merged_result <- merge(data.frame(group = group_names), agg_result, by = "group", all.x = TRUE)
# Extract the mean values and set group names as column names
setNames(merged_result[2], merged_result$group)
})
# Column names to iterate over, excluding 'group'
cols <- names(subset_of_interest)[2:7]
cols
# Extract unique group names to ensure consistency
group_names <- unique(subset_of_interest$group)
group_names
{aggregate(as.formula(paste(col, "~ group")),
data = subset_of_interest, mean))
{aggregate(as.formula(paste(col, "~ group")),
data = subset_of_interest, mean))
# Use lapply to compute the aggregate means for each column and ensure consistent groups
results <- lapply(cols, function(col)
{aggregate(as.formula(paste(col, "~ group")),
data = subset_of_interest, mean)})
results
results$used_script_digital
results
results[[1]]
results[[1]]$used_script_digital
cbind(results[[1]]$used_script_digital)
# Use lapply to compute the aggregate means for each column and ensure consistent groups
results <- lapply(cols, function(col)
{aggregate(as.formula(paste(col, "~ group")),
data = subset_of_interest, mean)})
results
results[[1]]$used_script_digital
cbind(results[[1]]$used_script_digital,
results[[2]]$used_script_digital,
results[[3]]$used_script_digital,
results[[4]]$used_script_digital,
results[[5]]$used_script_digital)
cbind
results[[1]]$used_script_digital
data.frame(results[[1]]$used_script_digital,
results[[2]]$used_script_digital,
results[[3]]$used_script_digital,
results[[4]]$used_script_digital,
results[[5]]$used_script_digital)
?cbind
group_names
data.frame(group_names[1] = results[[1]]$used_script_digital,
data.frame(group_names[1] = results[[1]]$used_script_digital,
data.frame()
?data.frame()
data.frame(test = c(1:2), blubb = c(1:2)
)
data.frame(as.factor(group_names[1]) = results[[1]]$used_script_digital,
as.factor(group_names[1])
data.frame(seminar1 = results[[1]]$used_script_digital,
seminar2 = results[[2]]$used_script_digital)
results[[1]]$used_script_digital
results[[2]]$used_script_digital
results
data.frame(seminar1 = results[[1]][, 2],
seminar2 = results[[2]][, 2])
data.frame(group_names[1] = results[[1]][, 2],
group_names[1]
data.frame(as.factor(group_names[1]) = results[[1]][, 2],
data.frame(seminar1 = results[[1]][, 2],
seminar2 = results[[2]][, 2])
data.frame("seminar1" = results[[1]][, 2],
seminar2 = results[[2]][, 2])
data.frame(group_names[1] = results[[1]][, 2],
name1 <- group_names[1]
data.frame(name1 = results[[1]][, 2],
seminar2 = results[[2]][, 2])
group_names[1]
column_titles <- c("col1", "col2")
data.frame(column_titles[1]= results[[1]][, 2],
column_titles[1]
data.frame("col1"= results[[1]][, 2],
seminar2 = results[[2]][, 2])
?setNames
data.frame(results[[1]][, 2],
results[[2]][, 2])
do.call(data.frame, results)
str(do.call(data.frame, results))
results[,1]
results[[]][,1]
do.call(data.frame, results)
used_material_df <- do.call(data.frame, results)
used_material_df[1, ]
used_material_df[,1]
used_material_df[,2]
used_material_df[,3]
used_material_df[,4]
colnames(used_material_df)
?which
which(LETTERS == "R")
which(LETTERS == c("R", "A")
)
match(LETTERS, c("A", "C"))
which(TRUE, FALSE)
which(TRUE, FALSE, TRUE)
which(c(TRUE, FALSE))
which(c(TRUE, FALSE, TRUE))
used_material_df <- used_material_df[,2]
used_material_df
used_material_df <- do.call(data.frame, results)
c(colnames(used_material_df) ==
group_names)
colnames(used_material_df) ==
group_names
match(group_names, colnames(used_material_df))
group_names
olnames(used_material_df)
colnames(used_material_df)
colnames(used_material_df)[2]
colnames(used_material_df)[2] == group_names[1]
group_names
cols
match(cols, colnames(used_material_df))
match(cols, colnames(used_material_df))
used_material_df <- used_material_df[,match(cols, colnames(used_material_df))]
used_material_df
