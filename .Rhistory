"All equally useful" = "cyan")
#define shape
shapes <- c("Scripts" = 15, "Videos of lectures and seminars" = 16,
"Live-streamed casts" = 17,"Contact events" = 18,
"Anki institute cards" = 8, "Anki own cards" = 3,
"All equally useful" = 3)
#define linetype
linetypes <- c("Scripts" = "solid", "Videos of lectures and seminars" = "dashed",
"Live-streamed casts" = "dotted","Contact events" = "dotdash",
"Anki institute cards" = "longdash", "Anki own cards" = "twodash",
"All equally useful" = 11)
figure <- ggplot(data = na.omit(df_helpful_materials_reshaped),
aes(x = exam, y = share, group = method_helpful, colour = method_helpful))
figure + geom_point(aes(shape = method_helpful), size = 3) +
geom_line(aes(linetype = method_helpful), linewidth = 1, ) +
scale_x_discrete(limits = groups, name = "Exam",
labels = c("Seminar 2022", "Lecture 2022", "Seminar 2022/23", "Lecture 2022/23", "Seminar 2023")) +
scale_y_continuous(limits = c(0, 1), breaks = seq(0, 1, 0.2)) +
theme_bw() +labs(title = "Methods considered useful by group",
color = "Methods considered helpful",
shape = "Methods considered helpful",
linetype = "Methods considered helpful",
x = "Exam",
y = "Share") +
scale_colour_manual(values = cols) +
scale_shape_manual(values = shapes) +
scale_linetype_manual(values = linetypes)
figure <- ggplot(data = na.df_helpful_materials_reshaped,
aes(x = exam, y = share, group = method_helpful, colour = method_helpful))
figure + geom_point(aes(shape = method_helpful), size = 3) +
geom_line(aes(linetype = method_helpful), linewidth = 1, ) +
scale_x_discrete(limits = groups, name = "Exam",
labels = c("Seminar 2022", "Lecture 2022", "Seminar 2022/23", "Lecture 2022/23", "Seminar 2023")) +
scale_y_continuous(limits = c(0, 1), breaks = seq(0, 1, 0.2)) +
theme_bw() +labs(title = "Methods considered useful by group",
color = "Methods considered helpful",
shape = "Methods considered helpful",
linetype = "Methods considered helpful",
x = "Exam",
y = "Share") +
scale_colour_manual(values = cols) +
scale_shape_manual(values = shapes) +
scale_linetype_manual(values = linetypes)
df_helpful_materials_reshaped <- reshape(data = df_helpful_materials,
direction = "long",
varying = list(names(df_helpful_materials)[-1]),
idvar = names(df_helpful_materials)[1],
times = names(df_helpful_materials)[-1],
timevar = "method_helpful",
v.names = "share")
df_helpful_materials_reshaped
#define colors
cols <- c("Scripts" = "red", "Videos of lectures and seminars" = "blue",
"Live-streamed casts" = "green","Contact events" = "yellow",
"Anki institute cards" = "black", "Anki own cards" = "orange",
"All equally useful" = "cyan")
#define shape
shapes <- c("Scripts" = 15, "Videos of lectures and seminars" = 16,
"Live-streamed casts" = 17,"Contact events" = 18,
"Anki institute cards" = 8, "Anki own cards" = 3,
"All equally useful" = 3)
#define linetype
linetypes <- c("Scripts" = "solid", "Videos of lectures and seminars" = "dashed",
"Live-streamed casts" = "dotted","Contact events" = "dotdash",
"Anki institute cards" = "longdash", "Anki own cards" = "twodash",
"All equally useful" = 11)
figure <- ggplot(data = df_helpful_materials_reshaped,
aes(x = exam, y = share, group = method_helpful, colour = method_helpful))
figure + geom_point(aes(shape = method_helpful), size = 3) +
geom_line(aes(linetype = method_helpful), linewidth = 1, ) +
scale_x_discrete(limits = groups, name = "Exam",
labels = c("Seminar 2022", "Lecture 2022", "Seminar 2022/23", "Lecture 2022/23", "Seminar 2023")) +
scale_y_continuous(limits = c(0, 1), breaks = seq(0, 1, 0.2)) +
theme_bw() +labs(title = "Methods considered useful by group",
color = "Methods considered helpful",
shape = "Methods considered helpful",
linetype = "Methods considered helpful",
x = "Exam",
y = "Share") +
scale_colour_manual(values = cols) +
scale_shape_manual(values = shapes) +
scale_linetype_manual(values = linetypes)
# install all required packages ------------------------------------------------------------
required_packages <- c("gt", "readxl","tidyverse", "grDevices", "ggpubr", "effsize", "superb", "nlme", "reshape2")
installed_packages <- required_packages %in% rownames(installed.packages())
if (any(installed_packages == FALSE)) {
install.packages(required_packages[!installed_packages])
}
invisible(lapply(required_packages, library, character.only = TRUE))
survey_data <- tibble(read_xlsx("data/processed/anki_data_comprehensive.xlsx")) # read survey data with all five groups
names(survey_data)[names(survey_data) == "group"] <- "exam" # rename "group" to "exam" to avoid collisions in ggplot2
# create df structure for descriptive stats.  -----------------------------
# Age is not yet analysed. Order of groups is: seminar 2022, lecture 2022, seminar 2022/23, lecture 2022/23, seminar 2023
students_per_group <- c(196, 107, 111, 266, 232) # number of students who wrote the exam in each group (excluding students absent from the exam). Data taken from score reports for each exam.
groups <- unique(survey_data$exam) # vector of different groups
respondents <- table(survey_data$exam)[groups] # create table of group frequencies and sort them by vector "groups". Otherwise, columns will be sorted by alphabet
response_rate <-  round(100*respondents/students_per_group, 2) # create table of response rates in percentages
gender_table <- table(survey_data$exam, survey_data$gender)[groups,] # create table of declared gender per group (1 = male, 2 = female, 3 = diverse or not declared)
gender_undeclared <- respondents - rowSums(gender_table) # get no of students who did not declare gender in each group
gender_table[,3] <- gender_table[,3] + gender_undeclared # add no of undeclared genders per group to gender table. row "3" now comprises both students of answered diverse, or who did not answer the question at all.
score_percentages_means <- aggregate(score_percentage ~ exam, data=survey_data, mean) # create df of mean score percentages by group
score_percentages_means_sorted <- score_percentages_means[match(groups, score_percentages_means$exam), ]
score_percentages_sds <- aggregate(score_percentage ~ exam, data=survey_data, sd) # create df of score percentage standard deviations by group
score_percentages_sds_sorted <- score_percentages_sds[match(groups, score_percentages_sds$exam), ]
score_percentages_means_sds <- paste(round(score_percentages_means_sorted[,2], 2), "\u00B1", round(score_percentages_sds_sorted[,2], 2)) # paste means +/- sds after rounding to 2 digits
descriptive_df <- data.frame(respondents = as.vector(respondents), # create data frame with all important descriptive data
response_rate = as.vector(response_rate),
score_percentages_means = score_percentages_means_sorted[, 2],
score_percentages_sds = score_percentages_sds_sorted[, 2],
as.data.frame.matrix(gender_table))
descriptive_df["totals", ] <- c(sum(respondents), # add bottom row with totals over all seminar and lecture exams
100 * sum(respondents) / sum(students_per_group),
mean(survey_data$score_percentage, na.rm = TRUE),
sd(survey_data$score_percentage, na.rm = TRUE),
sum(survey_data$gender == 1, na.rm = TRUE),
sum(survey_data$gender == 2, na.rm = TRUE),
sum(respondents) - sum(survey_data$gender == 1, na.rm = TRUE) -
sum(survey_data$gender == 2, na.rm = TRUE)
)
score_percentages_means_sds <- paste(round(c(score_percentages_means_sorted[,2],mean(survey_data$score_percentage, na.rm = TRUE)), 2),
"\u00B1",
round(c(score_percentages_sds_sorted[,2],sd(survey_data$score_percentage, na.rm = TRUE)), 2)) # paste means +/- sds after rounding to 2 digits
descriptive_df_processed <- descriptive_df[,-c(3,4)] # percentage means and sds converted to char and combined as mean +- sd
descriptive_df_processed$means_and_sds <- score_percentages_means_sds
descriptive_df_processed$response_rate <- round(descriptive_df_processed$response_rate, 2)
# descriptive table of sample characteristics. ----------------------------
rownames(descriptive_df_processed) <- c("Seminar 2022", "Lecture 2022", "Seminar 2022/23", "Lecture 2022/23", "Seminar 2023", "Totals")
descriptive_tbl <- as_tibble(cbind(nms = names(descriptive_df_processed), t(descriptive_df_processed))) # transpose and convert to tibble object
row_names <- c("Respondents [n]", "Response rate [%]", "Male", "Female", "Non-binary or refused to disclose", "Mean percentage of correct anwers [%] \u00B1 standard deviation") # expressive row names esp. for gender options
descriptive_tbl$nms = row_names # fill first column in descriptive_tbl with row names
descriptive_tbl_gt <- gt(descriptive_tbl, rowname_col = "nms") # create gt object with $nms as row names
indented_rows <- c("Male", "Female", "Non-binary or refused to disclose") # define rows to be indented (gender rows)
descriptive_tbl_gt <- tab_row_group(descriptive_tbl_gt, label = "Gender",  rows = indented_rows) # create gt_tbl object, label Gender rows for grouping and indenting
descriptive_tbl_gt <- tab_stub_indent(descriptive_tbl_gt, rows= indented_rows, indent = 3) # indent Gender rows
descriptive_tbl_gt <- row_group_order(descriptive_tbl_gt, groups = c(NA, "Gender")) # reorder groups with Gender being on the bottom
tab_header(descriptive_tbl_gt, "Subject characteristics")
descriptive_tbl_gt <- tab_style( # make column total in bold
descriptive_tbl_gt,
style = cell_text(weight = "bold"),
locations = cells_body(columns = "Totals")
)
descriptive_tbl_gt <- tab_style( # make column name "Totals" in bold as well
descriptive_tbl_gt,
style = cell_text(weight = "bold"),
locations = cells_column_labels(columns = Totals)
)
descriptive_tbl_gt
# line graph of used methods. ------------------------------------------------------------
vector_of_methods <- c("used_script_digital", "used_script_physical", "used_textbook", "used_guideline",
"used_anki_institute", "used_anki_custom") # declare variables for line graph
#options ignored: moodle quiz, moodle task, other
subset_of_interest <- survey_data[c("exam", vector_of_methods)] # relevant subset of survey_data df
df_used_materials <- as.data.frame(matrix(nrow = length(groups), ncol = length(vector_of_methods)))
colnames(df_used_materials) <- vector_of_methods
rownames(df_used_materials) <- groups # creates df with columns for used studying methods and rows for groups
for (i in 1:length(vector_of_methods)){ # fill df with shares of material used by group
method <- vector_of_methods[i]
share_used_method <- aggregate(get(vector_of_methods[i]) ~ exam, data=subset_of_interest, mean, na.rm = TRUE) # gives share of students who used physical scripts per group and in total
share_used_method <- share_used_method[match(groups, share_used_method$exam),] # sort by group
df_used_materials[,i] <- share_used_method[, 2]
}
# convert data frame to long format to be usable in ggplot
df_used_materials <- cbind(exam = rownames(df_used_materials), df_used_materials) # create rownames as expressive data column
# rename methods for aesthetic plot labels
colnames(df_used_materials) <- c(
"exam", "Digital script", "Physical script", "Textbooks", "Guidelines", "Anki institute cards", "Anki own cards")
df_used_materials_reshaped <- reshape(data = df_used_materials,
direction = "long",
varying = list(names(df_used_materials)[-1]),
idvar = names(df_used_materials)[1],
times = names(df_used_materials)[-1],
timevar = "method_used",
v.names = "share")
#plot
#define colors
cols <- c("Digital script" = "red", "Physical script" = "blue",
"Textbooks" = "green","Guidelines" = "yellow",
"Anki institute cards" = "black", "Anki own cards" = "orange")
#define shape
shapes <- c("Digital script" = 15, "Physical script" = 16,
"Textbooks" = 17,"Guidelines" = 18,
"Anki institute cards" = 8, "Anki own cards" = 3)
#define linetype
linetypes <- c("Digital script" = "solid", "Physical script" = "dashed",
"Textbooks" = "dotted","Guidelines" = "dotdash",
"Anki institute cards" = "longdash", "Anki own cards" = "twodash")
figure <- ggplot(data = df_used_materials_reshaped,
aes(x = exam, y = share, group = method_used, colour = method_used))
figure + geom_point(aes(shape = method_used), size = 3) +
geom_line(aes(linetype = method_used), linewidth = 1, ) +
scale_x_discrete(limits = groups, name = "Exam",
labels = c("Seminar 2022", "Lecture 2022", "Seminar 2022/23", "Lecture 2022/23", "Seminar 2023")) +
scale_y_continuous(limits = c(0, 1), breaks = seq(0, 1, 0.2)) +
theme_bw() +labs(title = "Methods used by group",
color = "Methods used",
shape = "Methods used",
linetype = "Methods used",
x = "Exam",
y = "Share") +
scale_colour_manual(values = cols) +
scale_shape_manual(values = shapes) +
scale_linetype_manual(values = linetypes)
# line graph of helpful. ------------------------------------------------------------
# vector_of_methods <- c("used_script_digital", "used_script_physical", "used_textbook", "used_guideline",
# "used_anki_institute", "used_anki_custom")
vector_of_helpful_methods <- c("helpful_script", "helpful_video", "helpful_streaming", "helpful_contact_event",
"helpful_anki_institute", "helpful_anki_custom", "helpful_all_equally")
#options ignored: moodle quiz, moodle task
subset_of_interest_helpful <- survey_data[c("exam", vector_of_helpful_methods)]  # relevant subset of survey_data df
df_helpful_materials <- as.data.frame(matrix(nrow = length(groups), ncol = length(vector_of_helpful_methods)))
colnames(df_helpful_materials) <- vector_of_helpful_methods
rownames(df_helpful_materials) <- groups # creates df with columns for used studying methods and rows for groups
for (i in 1:length(vector_of_helpful_methods)){ # fill df with shares of material used by group
method <- vector_of_helpful_methods[i]
share_helpful_method <- aggregate(get(vector_of_helpful_methods[i]) ~ exam, data=subset_of_interest_helpful, mean, na.rm = TRUE) # gives share of students who used physical scripts per group and in total
share_helpful_method <- share_helpful_method[match(groups, share_helpful_method$exam),] # sort by group
df_helpful_materials[,i] <- share_helpful_method[, 2]
}
# convert data frame to long format to be usable in ggplot
df_helpful_materials <- cbind(exam = rownames(df_helpful_materials), df_helpful_materials) # create rownames as expressive data column
# rename methods for aesthetic plot labels
colnames(df_helpful_materials) <- c("exam", "Scripts", "Videos of lectures and seminars",
"Live-streamed casts", "Contact events", "Anki institute cards", "Anki own cards",
"All equally useful")
df_helpful_materials_reshaped <- reshape(data = df_helpful_materials,
direction = "long",
varying = list(names(df_helpful_materials)[-1]),
idvar = names(df_helpful_materials)[1],
times = names(df_helpful_materials)[-1],
timevar = "method_helpful",
v.names = "share")
df_helpful_materials_reshaped[is.na(df_helpful_materials_reshaped)] <- 0 # just for testing, delete when done
#define colors
cols <- c("Scripts" = "red", "Videos of lectures and seminars" = "blue",
"Live-streamed casts" = "green","Contact events" = "yellow",
"Anki institute cards" = "black", "Anki own cards" = "orange",
"All equally useful" = "cyan")
#define shape
shapes <- c("Scripts" = 15, "Videos of lectures and seminars" = 16,
"Live-streamed casts" = 17,"Contact events" = 18,
"Anki institute cards" = 8, "Anki own cards" = 3,
"All equally useful" = 3)
#define linetype
linetypes <- c("Scripts" = "solid", "Videos of lectures and seminars" = "dashed",
"Live-streamed casts" = "dotted","Contact events" = "dotdash",
"Anki institute cards" = "longdash", "Anki own cards" = "twodash",
"All equally useful" = 11)
figure <- ggplot(data = df_helpful_materials_reshaped,
aes(x = exam, y = share, group = method_helpful, colour = method_helpful))
figure + geom_point(aes(shape = method_helpful), size = 3, na.rm = TRUE) +
geom_line(aes(linetype = method_helpful), linewidth = 1, ) +
scale_x_discrete(limits = groups, name = "Exam",
labels = c("Seminar 2022", "Lecture 2022", "Seminar 2022/23", "Lecture 2022/23", "Seminar 2023")) +
scale_y_continuous(limits = c(0, 1), breaks = seq(0, 1, 0.2)) +
theme_bw() +labs(title = "Methods considered useful by group",
color = "Methods considered helpful",
shape = "Methods considered helpful",
linetype = "Methods considered helpful",
x = "Exam",
y = "Share") +
scale_colour_manual(values = cols) +
scale_shape_manual(values = shapes) +
scale_linetype_manual(values = linetypes)
count_anki_helpful_and_used_general <- rowsum(as.numeric(survey_data$used_anki_institute == 1 &
survey_data$helpful_anki_institute == 1),
group = factor(survey_data$exam, levels = unique(survey_data$exam)), na.rm = T)
count_anki_not_helpful_and_used_general <- rowsum(as.numeric(survey_data$used_anki_institute == 1 &
survey_data$helpful_anki_institute == 2),
group = factor(survey_data$exam, levels = unique(survey_data$exam)), na.rm = T)
count_either_helpful_and_used_general <- count_anki_helpful_and_used_general+
count_anki_not_helpful_and_used_general
percent_anki_helpful <- 100*count_anki_helpful_and_used_general/count_either_helpful_and_used_general
df_percent_anki_helpful <- data.frame(groups = factor(row.names(percent_anki_helpful), levels = row.names(percent_anki_helpful)),
percentage = percent_anki_helpful,
row.names = NULL)
figure <- ggplot(data=df_percent_anki_helpful, aes(x=as.factor(groups), y=percentage)) +
geom_line(aes(group = 1)) +
geom_point() +
labs(x= "group", y = "% of Anki users who considered the cards helpful") +
ggtitle("Students who considered Anki cards helpful relative to number of users by group") +
theme_bw()+
expand_limits(y = c(NA, 100))
figure <- ggplot(data=df_percent_anki_helpful, aes(x=as.factor(groups), y=percentage)) +
geom_line(aes(group = 1)) +
geom_point() +
labs(x= "group", y = "% of Anki users who considered the cards helpful") +
ggtitle("Students who considered Anki cards helpful relative to number of users by group") +
theme_bw()+
expand_limits(y = c(NA, 100))
figure
df_percent_anki_helpful
count_anki_helpful_and_used_general <- rowsum(as.numeric(survey_data$used_anki_institute == 1 &
survey_data$helpful_anki_institute == 1),
group = factor(survey_data$exam, levels = unique(survey_data$exam)), na.rm = T)
count_anki_helpful_and_used_general
survey_data
View(survey_data)
count_anki_helpful_and_used_general <- rowsum(as.numeric(survey_data$used_anki_institute_general == 1 &
survey_data$helpful_anki_institute_general == 1),
group = factor(survey_data$exam, levels = unique(survey_data$exam)), na.rm = T)
count_anki_helpful_and_used_general
count_anki_helpful_and_used_general <- rowsum(as.numeric(survey_data$used_anki_institute_general == 1))
count_anki_helpful_and_used_general <- rowsum(as.numeric(survey_data$used_anki_institute_general == 1),
group = factor(survey_data$exam, levels = unique(survey_data$exam)), na.rm = T)
rowsum(as.numeric(survey_data$used_anki_institute_general == 1),
group = factor(survey_data$exam, levels = unique(survey_data$exam)), na.rm = T)
rowsum(as.numeric(survey_data$used_anki_institute == 1),
group = factor(survey_data$exam, levels = unique(survey_data$exam)), na.rm = T)
count_anki_helpful_and_used_general <- rowsum(as.numeric(survey_data$used_anki_institute_general == 1 &
survey_data$helpful_anki_institute_general == 1),
group = factor(survey_data$exam, levels = unique(survey_data$exam)), na.rm = T)
count_anki_helpful_and_used_general
count_anki_helpful_and_used_general <- rowsum(as.numeric(survey_data$used_anki_institute_general == 1 &
survey_data$helpful_anki_institute_general == 1),
group = factor(survey_data$exam, levels = unique(survey_data$exam)), na.rm = T)
count_anki_not_helpful_but_used_general <- rowsum(as.numeric(survey_data$used_anki_institute_general == 1 &
survey_data$helpful_anki_institute_general == 2),
group = factor(survey_data$exam, levels = unique(survey_data$exam)), na.rm = T)
count_anki_helpful_and_used_general
count_anki_not_helpful_but_used_general
rowsum(as.numeric(survey_data$used_anki_institute_general == 1,
group = factor(survey_data$exam, levels = unique(survey_data$exam)), na.rm = T)
rowsum(as.numeric(survey_data$used_anki_institute_general == 1),
group = factor(survey_data$exam, levels = unique(survey_data$exam)), na.rm = T)
count_anki_helpful_and_used_general <- rowsum(as.numeric(survey_data$used_anki_institute_general == 1 &
survey_data$helpful_anki_institute_general == 1),
group = factor(survey_data$exam, levels = unique(survey_data$exam)), na.rm = T)
count_anki_used_general <- rowsum(as.numeric(survey_data$used_anki_institute_general == 1),
group = factor(survey_data$exam, levels = unique(survey_data$exam)), na.rm = T)
count_anki_helpful_and_used_general <- rowsum(as.numeric(survey_data$used_anki_institute_general == 1 &
survey_data$helpful_anki_institute_general == 1),
group = factor(survey_data$exam, levels = unique(survey_data$exam)), na.rm = T)
count_anki_helpful_and_used_general <- rowsum(as.numeric(survey_data$used_anki_institute_general == 1 &
survey_data$helpful_anki_institute_general == 2),
group = factor(survey_data$exam, levels = unique(survey_data$exam)), na.rm = T)
count_anki_helpful_and_used_general
count_anki_helpful_and_used_general
count_anki_helpful_and_used_general <- rowsum(as.numeric(survey_data$used_anki_institute_general == 1 &
survey_data$helpful_anki_institute_general == 1),
group = factor(survey_data$exam, levels = unique(survey_data$exam)), na.rm = T)
count_anki_helpful_but_not_used_general <- rowsum(as.numeric(survey_data$used_anki_institute_general == 1 &
survey_data$helpful_anki_institute_general == 2),
group = factor(survey_data$exam, levels = unique(survey_data$exam)), na.rm = T)
count_responded_to_question <- count_anki_helpful_and_used_general + count_anki_helpful_but_not_used_general
count_responded_to_question
count_anki_helpful_and_used_general
count_anki_helpful_but_not_used_general
count_responded_to_question
count_anki_helpful_and_used_general <- rowsum(as.numeric(survey_data$used_anki_institute_general == 1 &
survey_data$helpful_anki_institute_general == 1),
group = factor(survey_data$exam, levels = unique(survey_data$exam)), na.rm = T)
count_anki_helpful_but_not_used_general <- rowsum(as.numeric(survey_data$used_anki_institute_general == 1 &
survey_data$helpful_anki_institute_general == 2),
group = factor(survey_data$exam, levels = unique(survey_data$exam)), na.rm = T)
count_responded_to_question <- count_anki_helpful_and_used_general + count_anki_helpful_but_not_used_general
percent_anki_helpful <- 100*count_anki_helpful_and_used_general/count_responded_to_question
percent_anki_helpful
count_anki_helpful_and_used_general
count_anki_helpful_but_not_used_general
count_anki_helpful_but_not_used_general <- rowsum(as.numeric(survey_data$used_anki_institute_general == 1),
group = factor(survey_data$exam, levels = unique(survey_data$exam)), na.rm = T)
count_anki_helpful_but_not_used_general
# discard "seminar_22" since question not contained in their survey
percent_anki_helpful <- 100*count_anki_helpful_and_used_general[-1,]/count_responded_to_question[-1,]
percent_anki_helpful
df_percent_anki_helpful <- data.frame(groups = factor(row.names(percent_anki_helpful), levels = row.names(percent_anki_helpful)),
percentage = percent_anki_helpful,
row.names = NULL)
factor(row.names(percent_anki_helpful)
)
row.names(percent_anki_helpful)
percent_anki_helpful
col.names(percent_anki_helpful)
?row.names
column.names(percent_anki_helpful)
names(percent_anki_helpful)
row.names(percent_anki_helpful)
df_percent_anki_helpful <- data.frame(groups = factor(names(percent_anki_helpful), levels = names(percent_anki_helpful)),
percentage = percent_anki_helpful,
row.names = NULL)
df_percent_anki_helpful
figure <- ggplot(data=df_percent_anki_helpful, aes(x=as.factor(groups), y=percentage)) +
geom_line(aes(group = 1)) +
geom_point() +
labs(x= "group", y = "% of Anki users who considered the cards helpful") +
ggtitle("Students who considered Anki cards helpful relative to number of users by group") +
theme_bw()+
expand_limits(y = c(NA, 100))
figure
figure <- ggplot(data=df_percent_anki_helpful, aes(x=as.factor(groups), y=percentage)) +
geom_line(aes(group = 1)) +
geom_point() +
labs(x= "group", y = "% of Anki users who considered the cards helpful") +
ggtitle("Students who considered Anki cards helpful relative to number of users by group") +
theme_bw()+
expand_limits(y = c(0, 100))
figure
figure <- ggplot(data=df_percent_anki_helpful, aes(x=as.factor(groups), y=percentage)) +
geom_line(aes(group = 1)) +
geom_point(size = 3) +
labs(x= "Exam", y = "% of Anki users who considered the cards helpful") +
ggtitle("Students who considered Anki cards helpful relative to number of users by group") +
theme_bw()+
expand_limits(y = c(0, 100))
figure
figure <- ggplot(data=df_percent_anki_helpful, aes(x=as.factor(groups), y=percentage)) +
geom_line(aes(group = 1, size = 2)) +
geom_point(size = 3) +
labs(x= "Exam", y = "% of Anki users who considered the cards helpful") +
ggtitle("Students who considered Anki cards helpful relative to number of users by group") +
theme_bw()+
expand_limits(y = c(0, 100))
figure
figure <- ggplot(data=df_percent_anki_helpful, aes(x=as.factor(groups), y=percentage)) +
geom_line(aes(group = 1, linewidth = 1)) +
geom_point(size = 3) +
labs(x= "Exam", y = "% of Anki users who considered the cards helpful") +
ggtitle("Students who considered Anki cards helpful relative to number of users by group") +
theme_bw()+
expand_limits(y = c(0, 100))
figure
figure <- ggplot(data=df_percent_anki_helpful, aes(x=as.factor(groups), y=percentage)) +
geom_line(aes(group = 1, linewidth = 0.5)) +
geom_point(size = 3) +
labs(x= "Exam", y = "% of Anki users who considered the cards helpful") +
ggtitle("Students who considered Anki cards helpful relative to number of users by group") +
theme_bw()+
expand_limits(y = c(0, 100))
figure <- ggplot(data=df_percent_anki_helpful, aes(x=as.factor(groups), y=percentage)) +
geom_line(aes(group = 1)) +
geom_point(size = 3) +
labs(x= "Exam", y = "% of Anki users who considered the cards helpful") +
ggtitle("Students who considered Anki cards helpful relative to number of users by group") +
theme_bw()+
expand_limits(y = c(0, 100))
figure
figure <- ggplot(data=df_percent_anki_helpful, aes(x=as.factor(groups), y=percentage)) +
geom_line(aes(group = 1)) +
geom_point(size = 3) +
labs(x= "Exam", y = "% of Anki users who considered the cards helpful") + # actually it is % of users who answered the question on whether the cards were helpful
ggtitle("Students who considered Anki cards helpful relative to number of users by group") +
theme_bw()+
expand_limits(y = c(0, 100))+
scale_x_discrete(limits = groups, name = "Exam",
labels = c("Lecture 2022", "Seminar 2022/23", "Lecture 2022/23", "Seminar 2023"))
figure
figure <- ggplot(data=df_percent_anki_helpful, aes(x=as.factor(groups), y=percentage)) +
geom_line(aes(group = 1)) +
geom_point(size = 3) +
labs(x= "Exam", y = "% of Anki users who considered the cards helpful") + # actually it is % of users who answered the question on whether the cards were helpful
ggtitle("Students who considered Anki cards helpful relative to number of users by group") +
theme_bw()+
expand_limits(y = c(0, 100))+
scale_x_discrete(limits = groups[-1], name = "Exam",
labels = c("Lecture 2022", "Seminar 2022/23", "Lecture 2022/23", "Seminar 2023"))
figure
df_percent_anki_helpful
# boxs of exam scores
survey_data_boxplot <- survey_data
survey_data_boxplot$used_anki[survey_data_boxplot$used_anki == 0] <- "did not study with Anki"
survey_data_boxplot$used_anki
# boxs of exam scores
survey_data_boxplot <- survey_data
survey_data_boxplot$used_anki[survey_data_boxplot$used_anki == 0] <- "did not study with Anki"
geom_boxplot()
?geom_boxplot()
mpg
p <- ggplot(mpg, aes(class, hwy))
p + geom_boxplot()
# create a data frame
variety=rep(LETTERS[1:7], each=40)
treatment=rep(c("high","low"),each=20)
note=seq(1:280)+sample(1:150, 280, replace=T)
data=data.frame(variety, treatment ,  note)
data
View(survey_data[, -1])
boxplot_data <- survey_data[survey_data$exam != "seminar_22",]
boxplot_data
View(boxplot_data[,-1])
ggplot(data = boxplot_data, aes(x = exam, y=score_percentage)) +
geom_boxplot()
ggplot(data = boxplot_data, aes(x = exam, y=score_percentage)) +
geom_boxplot(na.rm = TRUE)
ggplot(data = boxplot_data, aes(x = exam, y=score_percentage, fill = used_anki_institute_general)) +
geom_boxplot(na.rm = TRUE)
ggplot(data = boxplot_data, aes(x = exam, y=score_percentage, fill = factor(used_anki_institute_general))) +
geom_boxplot(na.rm = TRUE)
ggplot(data = boxplot_data, aes(x = exam, y=score_percentage, fill = factor(used_anki_institute_general)), na.rm = TRUE) +
geom_boxplot(na.rm = TRUE)
ggplot(data = na.omit(boxplot_data), aes(x = exam, y=score_percentage, fill = factor(used_anki_institute_general)), na.rm = TRUE) +
geom_boxplot(na.rm = TRUE)
ggplot(data = na.omit(boxplot_data), aes(x = exam, y=score_percentage, fill = factor(used_anki_institute_general)), na.rm = TRUE) +
geom_boxplot()
boxplot_data
na.omit(boxplot_data)
boxplot_data
ggplot(data = na.omit(boxplot_data), aes(x = exam, y=score_percentage, fill = used_anki_institute_general), na.rm = TRUE) +
geom_boxplot()
ggplot(data = boxplot_data, aes(x = exam, y=score_percentage, fill = used_anki_institute_general), na.rm = TRUE) +
geom_boxplot()
?factor
ggplot(data = boxplot_data, aes(x = exam, y=score_percentage, fill = factor(used_anki_institute_general)), na.rm = TRUE) +
geom_boxplot()
ggplot(data = boxplot_data, aes(x = exam, y=score_percentage, fill = factor(used_anki_institute_general, na.rm = T)), na.rm = TRUE) +
geom_boxplot()
rlang::last_trace()
?omit.na
?omit_na
factor(boxplot_data$used_anki_institute_general)
ggplot(data = subset(boxplot_data, !is.na(used_anki_institute_general)),
aes(x = exam, y=score_percentage, fill = factor(used_anki_institute_general)), na.rm = TRUE) +
geom_boxplot()
