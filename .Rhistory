load("X:/anki/wd/.RData")
####### install all required packages
required_packages <- c("gt", "readxl", "dplyr", "tibble", "grDevices", "ggplot2", "ggpubr", "effsize", "superb", "nlme")
installed_packages <- required_packages %in% rownames(installed.packages())
if (any(installed_packages == FALSE)) {
install.packages(required_packages[!installed_packages])
}
invisible(lapply(required_packages, library, character.only = TRUE))
survey_data <- read_xlsx("data/processed/anki_data_comprehensive.xlsx") # read survey data with all five groups
total_students_per_group <- c(196, 107, 111, 266, 232) # number of students who wrote the exam in each group (excluding students absent from the exam). Data taken from score reports for each exam.
survey_data
View(survey_data)
view(survey_data)
?view
?View
?view
survey_data <- read_xlsx("data/processed/anki_data_comprehensive.xlsx") # read survey data with all five groups
view(survey_data)
getwd()
shell("data/processed/anki_data_comprehensive.xlsx")
shell("data/processed/anki_data_comprehensive.xlsx")
shell.exec("data/processed/anki_data_comprehensive.xlsx")
system("data/processed/anki_data_comprehensive.xlsx")
system("data/processed/anki_data_comprehensive.xlsx")
system("data/processed/anki_data_comprehensive.xlsx", intern = F)
survey_data$age
survey_data$score
utils::View(survey_data)
?rstudioapi
rstudioapi::writeRStudioPreference()
??rstudioapi
writeRStudioPreference("data_viewer_max_columns", 1000)
rstudioapi::writeRStudioPreference("data_viewer_max_columns", 1000)
?L
rstudioapi::writeRStudioPreference("data_viewer_max_columns", 1000L)
View(survey_data)
rstudioapi::writeRStudioPreference("data_viewer_max_columns", 1000L)
View(survey_data)
rstudioapi::writeRStudioPreference("data_viewer_max_columns", 53L)
View(survey_data)
rstudioapi::writeRStudioPreference("data_viewer_max_columns", 1L)
View(survey_data)
rstudioapi::writeRStudioPreference("data_viewer_max_columns", 1000L)
View(survey_data)
rstudioapi::writeRStudioPreference("data_viewer_max_columns", 49L)
View(survey_data)
rstudioapi::writeRStudioPreference("data_viewer_max_columns", 50L)
View(survey_data)
rstudioapi::writeRStudioPreference("data_viewer_max_columns", 51L)
View(survey_data)
rstudioapi::writeRStudioPreference("data_viewer_max_columns", 52L)
View(survey_data)
rstudioapi::writeRStudioPreference("data_viewer_max_columns", 53L)
View(survey_data)
rstudioapi::writeRStudioPreference("data_viewer_max_columns", 1L)
View(survey_data)
rstudioapi::writeRStudioPreference("data_viewer_max_columns", 1000L)
View(survey_data)
sum(survey_data$group == "seminar_22")
sum(survey_data$group == "lecture_22")
sum(survey_data$group == "seminar_22_23")
sum(survey_data$group == "lecture_22_23")
sum(survey_data$group == "seminar_23")
total_students_per_group <- c(196, 107, 111, 266, 232) # number of students who wrote the exam in each group (excluding students absent from the exam). Data taken from score reports for each exam.
groups <- unique(survey_data$group) # vector of different groups
groups
survey_data <- read_xlsx("data/processed/anki_data_comprehensive.xlsx") # read survey data with all five groups
total_students_per_group <- c(196, 107, 111, 266, 232) # number of students who wrote the exam in each group (excluding students absent from the exam). Data taken from score reports for each exam.
groups <- unique(survey_data$group) # vector of different groups
?tibble
####### install all required packages
required_packages <- c("gt", "readxl", "tidyverse", "tidyverse", "grDevices", "ggplot2", "ggpubr", "effsize", "superb", "nlme")
installed_packages <- required_packages %in% rownames(installed.packages())
if (any(installed_packages == FALSE)) {
install.packages(required_packages[!installed_packages])
}
invisible(lapply(required_packages, library, character.only = TRUE))
invisible(lapply(required_packages, library, character.only = TRUE))
survey_data <- tibble(read_xlsx("data/processed/anki_data_comprehensive.xlsx")) # read survey data with all five groups
survey_data
view(survey_data)
total_students_per_group <- c(196, 107, 111, 266, 232) # number of students who wrote the exam in each group (excluding students absent from the exam). Data taken from score reports for each exam.
groups <- unique(survey_data$group) # vector of different groups
groups
respondents <- table(survey_data$group)[groups] # create table of group frequencies and sort them by vector "groups". Otherwise, columns will be sorted by alphabet
respondents
?table
table(survey_data$group)
respondents
groups
respondents <- table(survey_data$group)[groups] # create table of group frequencies and sort them by vector "groups". Otherwise, columns will be sorted by alphabet
response_rate <-  round(100*respondents/students_per_group, 2) # create table of response rates in percentages
table(survey_data$group, survey_data$gender)
table(survey_data$group, survey_data$gender)[groups,]
survey_data <- tibble(read_xlsx("data/processed/anki_data_comprehensive.xlsx")) # read survey data with all five groups
total_students_per_group <- c(196, 107, 111, 266, 232) # number of students who wrote the exam in each group (excluding students absent from the exam). Data taken from score reports for each exam.
groups <- unique(survey_data$group) # vector of different groups
respondents <- table(survey_data$group)[groups] # create table of group frequencies and sort them by vector "groups". Otherwise, columns will be sorted by alphabet
response_rate <-  round(100*respondents/students_per_group, 2) # create table of response rates in percentages
gender_table <- table(survey_data$group, survey_data$gender)[groups,] # create table of declared gender per group (1 = male, 2 = female, 3 = diverse or not declared)
gender_undeclared <- respondents - rowSums(gender_table) # get no of students who did not declare gender in each group
gender_table[,3] <- gender_table[,3] + gender_undeclared # add no of undeclared genders per group to gender table. row "3" now comprises both students of answered diverse, or who did not answer the question at all.
survey_data <- tibble(read_xlsx("data/processed/anki_data_comprehensive.xlsx")) # read survey data with all five groups
total_students_per_group <- c(196, 107, 111, 266, 232) # number of students who wrote the exam in each group (excluding students absent from the exam). Data taken from score reports for each exam.
groups <- unique(survey_data$group) # vector of different groups
respondents <- table(survey_data$group)[groups] # create table of group frequencies and sort them by vector "groups". Otherwise, columns will be sorted by alphabet
response_rate <-  round(100*respondents/students_per_group, 2) # create table of response rates in percentages
gender_table <- table(survey_data$group, survey_data$gender)[groups,] # create table of declared gender per group (1 = male, 2 = female, 3 = diverse or not declared)
survey_data <- tibble(read_xlsx("data/processed/anki_data_comprehensive.xlsx")) # read survey data with all five groups
total_students_per_group <- c(196, 107, 111, 266, 232) # number of students who wrote the exam in each group (excluding students absent from the exam). Data taken from score reports for each exam.
groups <- unique(survey_data$group) # vector of different groups
respondents <- table(survey_data$group)[groups] # create table of group frequencies and sort them by vector "groups". Otherwise, columns will be sorted by alphabet
response_rate <-  round(100*respondents/students_per_group, 2) # create table of response rates in percentages
students_per_group <- c(196, 107, 111, 266, 232) # number of students who wrote the exam in each group (excluding students absent from the exam). Data taken from score reports for each exam.
groups <- unique(survey_data$group) # vector of different groups
respondents <- table(survey_data$group)[groups] # create table of group frequencies and sort them by vector "groups". Otherwise, columns will be sorted by alphabet
response_rate <-  round(100*respondents/students_per_group, 2) # create table of response rates in percentages
response_rate
gender_table <- table(survey_data$group, survey_data$gender)[groups,] # create table of declared gender per group (1 = male, 2 = female, 3 = diverse or not declared)
gender_table
?rowSums
gender_table <- table(survey_data$group, survey_data$gender)[groups,] # create table of declared gender per group (1 = male, 2 = female, 3 = diverse or not declared)
gender_undeclared <- respondents - rowSums(gender_table) # get no of students who did not declare gender in each group
gender_table[,3] <-
gender_table[,3]
gender_table[,3] <- gender_table[,3] + gender_undeclared
gender_table
?aggregate
score_percentages_means <- aggregate(score_percentage ~ group, data=survey_data, mean) # create df of mean score percentages by group
score_percentages_means
score_percentages_sds <- aggregate(score_percentage ~ group, data=survey_data, sd) # create df of score percentage standard deviations by group
score_percentages_sds
score_percentages_means
score_percentages_sds
score_percentages_means_sds
score_percentages_means_sds <- paste(round(score_percentages_means[,2], 2), "\u00B1", round(score_percentages_sds[,2], 2)) # paste means +/- sds after rounding to 2 digits
score_percentages_means_sds
descriptive_matrix <- cbind(respondents, response_rate = response_rate, gender_table, score_percentages_means_sds = score_percentages_means_sds) # combine to table with all descriptive stats
descriptive_matrix
mean(survey_data$score_percentage)
descriptive_tbl <- as_tibble(cbind(nms = names(descriptive_df), t(descriptive_df))) # transpose and convert to tibble object
survey_data$score_percentage
students_per_group <- c(196, 107, 111, 266, 232) # number of students who wrote the exam in each group (excluding students absent from the exam). Data taken from score reports for each exam.
groups <- unique(survey_data$group) # vector of different groups
respondents <- table(survey_data$group)[groups] # create table of group frequencies and sort them by vector "groups". Otherwise, columns will be sorted by alphabet
response_rate <-  round(100*respondents/students_per_group, 2) # create table of response rates in percentages
gender_table <- table(survey_data$group, survey_data$gender)[groups,] # create table of declared gender per group (1 = male, 2 = female, 3 = diverse or not declared)
gender_undeclared <- respondents - rowSums(gender_table) # get no of students who did not declare gender in each group
gender_table[,3] <- gender_table[,3] + gender_undeclared # add no of undeclared genders per group to gender table. row "3" now comprises both students of answered diverse, or who did not answer the question at all.
score_percentages_means <- aggregate(score_percentage ~ group, data=survey_data, mean) # create df of mean score percentages by group
score_percentages_sds <- aggregate(score_percentage ~ group, data=survey_data, sd) # create df of score percentage standard deviations by group
score_percentages_means_sds <- paste(round(score_percentages_means[,2], 2), "\u00B1", round(score_percentages_sds[,2], 2)) # paste means +/- sds after rounding to 2 digits
descriptive_matrix <- cbind(respondents, response_rate = response_rate, gender_table, score_percentages_means_sds = score_percentages_means_sds) # combine to table with all descriptive stats
descriptive_df <- data.frame(descriptive_matrix) # convert matrix to df
score_percentages_means_sds
descriptive_df
survey_data$score_percentage[group == "seminar_22"]
survey_data[group == "seminar_22",]$score_percentage
survey_data[group]
survey_data&group
survey_data
survey_data$group
survey_data[group]
survey_data[group == NA]
survey_data$group == "seminar_22"
survey_data$score_percentage[survey_data$group == "seminar_22"]
survey_data <- tibble(read_xlsx("data/processed/anki_data_comprehensive.xlsx")) # read survey data with all five groups
students_per_group <- c(196, 107, 111, 266, 232) # number of students who wrote the exam in each group (excluding students absent from the exam). Data taken from score reports for each exam.
groups <- unique(survey_data$group) # vector of different groups
survey_data$score_percentage[survey_data$group == "seminar_22"]
survey_data <- tibble(read_xlsx("data/processed/anki_data_comprehensive.xlsx")) # read survey data with all five groups
survey_data
survey_data&group
survey_data&"used_script_digital"
survey_data$group
survey_data["group"]
survey_data["group" == "seminar_22"]
survey_data$group == "seminar_22"
mean(survey_data$score_percentage[survey_data$group == "seminar_22"])
survey_data$score_percentage
survey_data <- tibble(read_xlsx("data/processed/anki_data_comprehensive.xlsx")) # read survey data with all five groups
survey_data <- read_xlsx("data/processed/anki_data_comprehensive.xlsx") # read survey data with all five groups
survey_data
colnames(survey_data)
survey_data <- read_xlsx("data/processed/anki_data_comprehensive.xlsx") # read survey data with all five groups
survey_data <- read_xlsx("data/processed/anki_data_comprehensive.xlsx") # read survey data with all five groups
survey_data <- read_xlsx("data/processed/anki_data_comprehensive.xlsx") # read survey data with all five groups
survey_data$score_percentage
survey_data$score_percentage[survey_data$group == "seminar_22"]
mean(survey_data$score_percentage[survey_data$group == "seminar_22"])
mean(survey_data$score_percentage[survey_data$group == "seminar_22"], na.rm = T)
?tbble
?tibble
survey_data <- tibble(read_xlsx("data/processed/anki_data_comprehensive.xlsx")) # read survey data with all five groups
mean(survey_data$score_percentage[survey_data$group == "seminar_22"], na.rm = T)
mean(survey_data$score_percentage[survey_data$group == "lecture_22"], na.rm = T)
students_per_group <- c(196, 107, 111, 266, 232) # number of students who wrote the exam in each group (excluding students absent from the exam). Data taken from score reports for each exam.
groups <- unique(survey_data$group) # vector of different groups
respondents <- table(survey_data$group)[groups] # create table of group frequencies and sort them by vector "groups". Otherwise, columns will be sorted by alphabet
response_rate <-  round(100*respondents/students_per_group, 2) # create table of response rates in percentages
gender_table <- table(survey_data$group, survey_data$gender)[groups,] # create table of declared gender per group (1 = male, 2 = female, 3 = diverse or not declared)
gender_undeclared <- respondents - rowSums(gender_table) # get no of students who did not declare gender in each group
gender_table[,3] <- gender_table[,3] + gender_undeclared # add no of undeclared genders per group to gender table. row "3" now comprises both students of answered diverse, or who did not answer the question at all.
score_percentages_means <- aggregate(score_percentage ~ group, data=survey_data, mean) # create df of mean score percentages by group
score_percentages_means
score_percentages_sds
score_percentages_means_sds <- paste(round(score_percentages_means[,2], 2), "\u00B1", round(score_percentages_sds[,2], 2)) # paste means +/- sds after rounding to 2 digits
score_percentages_means_sds
table(survey_data$group, survey_data$gender)
survey_data[group]
group
score_percentages_means <- aggregate(score_percentage ~ group, data=survey_data, mean)[groups, ] # create df of mean score percentages by group
score_percentages_sds <- aggregate(score_percentage ~ group, data=survey_data, sd)[groups, ] # create df of score percentage standard deviations by group
score_percentages_means_sds <- paste(round(score_percentages_means[,2], 2), "\u00B1", round(score_percentages_sds[,2], 2)) # paste means +/- sds after rounding to 2 digits
score_percentages_means
aggregate(score_percentage ~ group, data=survey_data, mean)
score_percentages_means <- aggregate(score_percentage ~ group, data=survey_data, mean)
score_percentages_means
score_percentages_means[lecture_22, ]
survey_data$group
table(survey_data$group)
aggregate(score_percentage ~ group, data=survey_data, mean)
score_percentages_means <- aggregate(score_percentage ~ group, data=survey_data, mean)
score_percentages_means <- aggregate(score_percentage ~ group, data=survey_data, mean) # create df of mean score percentages by group
score_percentages_means
tibble(score_percentages_means)
tibble(score_percentages_means)[lecture_22, ]
tibble(score_percentages_means)["lecture_22", ]
