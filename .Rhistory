results[[1]]$used_script_digital
results[[2]]$used_script_digital
results
data.frame(seminar1 = results[[1]][, 2],
seminar2 = results[[2]][, 2])
data.frame(group_names[1] = results[[1]][, 2],
group_names[1]
data.frame(as.factor(group_names[1]) = results[[1]][, 2],
data.frame(seminar1 = results[[1]][, 2],
seminar2 = results[[2]][, 2])
data.frame("seminar1" = results[[1]][, 2],
seminar2 = results[[2]][, 2])
data.frame(group_names[1] = results[[1]][, 2],
name1 <- group_names[1]
data.frame(name1 = results[[1]][, 2],
seminar2 = results[[2]][, 2])
group_names[1]
column_titles <- c("col1", "col2")
data.frame(column_titles[1]= results[[1]][, 2],
column_titles[1]
data.frame("col1"= results[[1]][, 2],
seminar2 = results[[2]][, 2])
?setNames
data.frame(results[[1]][, 2],
results[[2]][, 2])
do.call(data.frame, results)
str(do.call(data.frame, results))
results[,1]
results[[]][,1]
do.call(data.frame, results)
used_material_df <- do.call(data.frame, results)
used_material_df[1, ]
used_material_df[,1]
used_material_df[,2]
used_material_df[,3]
used_material_df[,4]
colnames(used_material_df)
?which
which(LETTERS == "R")
which(LETTERS == c("R", "A")
)
match(LETTERS, c("A", "C"))
which(TRUE, FALSE)
which(TRUE, FALSE, TRUE)
which(c(TRUE, FALSE))
which(c(TRUE, FALSE, TRUE))
used_material_df <- used_material_df[,2]
used_material_df
used_material_df <- do.call(data.frame, results)
c(colnames(used_material_df) ==
group_names)
colnames(used_material_df) ==
group_names
match(group_names, colnames(used_material_df))
group_names
olnames(used_material_df)
colnames(used_material_df)
colnames(used_material_df)[2]
colnames(used_material_df)[2] == group_names[1]
group_names
cols
match(cols, colnames(used_material_df))
match(cols, colnames(used_material_df))
used_material_df <- used_material_df[,match(cols, colnames(used_material_df))]
used_material_df
####### install all required packages
required_packages <- c("gt", "readxl","tidyverse", "grDevices", "ggpubr", "effsize", "superb", "nlme")
installed_packages <- required_packages %in% rownames(installed.packages())
if (any(installed_packages == FALSE)) {
install.packages(required_packages[!installed_packages])
}
invisible(lapply(required_packages, library, character.only = TRUE))
survey_data <- tibble(read_xlsx("data/processed/anki_data_comprehensive.xlsx")) # read survey data with all five groups
students_per_group <- c(196, 107, 111, 266, 232) # number of students who wrote the exam in each group (excluding students absent from the exam). Data taken from score reports for each exam.
groups <- unique(survey_data$group) # vector of different groups
respondents <- table(survey_data$group)[groups] # create table of group frequencies and sort them by vector "groups". Otherwise, columns will be sorted by alphabet
response_rate <-  round(100*respondents/students_per_group, 2) # create table of response rates in percentages
gender_table <- table(survey_data$group, survey_data$gender)[groups,] # create table of declared gender per group (1 = male, 2 = female, 3 = diverse or not declared)
gender_undeclared <- respondents - rowSums(gender_table) # get no of students who did not declare gender in each group
gender_table[,3] <- gender_table[,3] + gender_undeclared # add no of undeclared genders per group to gender table. row "3" now comprises both students of answered diverse, or who did not answer the question at all.
score_percentages_means <- aggregate(score_percentage ~ group, data=survey_data, mean) # create df of mean score percentages by group
score_percentages_means_sorted <- score_percentages_means[match(groups, score_percentages_means$group), ]
score_percentages_sds <- aggregate(score_percentage ~ group, data=survey_data, sd) # create df of score percentage standard deviations by group
score_percentages_sds_sorted <- score_percentages_sds[match(groups, score_percentages_sds$group), ]
score_percentages_means_sds <- paste(round(score_percentages_means_sorted[,2], 2), "\u00B1", round(score_percentages_sds_sorted[,2], 2)) # paste means +/- sds after rounding to 2 digits
descriptive_df <- data.frame(respondents = as.vector(respondents), # create data frame with all important descriptive data
response_rate = as.vector(response_rate),
score_percentages_means = score_percentages_means_sorted[, 2],
score_percentages_sds = score_percentages_sds_sorted[, 2],
as.data.frame.matrix(gender_table))
descriptive_df["totals", ] <- c(sum(respondents), # add bottom row with totals over all seminar and lecture exams
100 * sum(respondents) / sum(students_per_group),
mean(survey_data$score_percentage, na.rm = TRUE),
sd(survey_data$score_percentage, na.rm = TRUE),
sum(survey_data$gender == 1, na.rm = TRUE),
sum(survey_data$gender == 2, na.rm = TRUE),
sum(respondents) - sum(survey_data$gender == 1, na.rm = TRUE) -
sum(survey_data$gender == 2, na.rm = TRUE)
)
score_percentages_means_sds <- paste(round(c(score_percentages_means_sorted[,2],mean(survey_data$score_percentage, na.rm = TRUE)), 2),
"\u00B1",
round(c(score_percentages_sds_sorted[,2],sd(survey_data$score_percentage, na.rm = TRUE)), 2)) # paste means +/- sds after rounding to 2 digits
descriptive_df_processed <- descriptive_df[,-c(3,4)] # percentage means and sds converted to char and combined as mean +- sd
descriptive_df_processed$means_and_sds <- score_percentages_means_sds
descriptive_df_processed$response_rate <- round(descriptive_df_processed$response_rate, 2)
rownames(descriptive_df_processed) <- c("Seminar 2022", "Lecture 2022", "Seminar 2022/23", "Lecture 2022/23", "Seminar 2023", "Totals")
descriptive_tbl <- as_tibble(cbind(nms = names(descriptive_df_processed), t(descriptive_df_processed))) # transpose and convert to tibble object
row_names <- c("Respondents [n]", "Response rate [%]", "Male", "Female", "Non-binary or refused to disclose", "Mean percentage of correct anwers [%] \u00B1 standard deviation") # expressive row names esp. for gender options
descriptive_tbl$nms = row_names # fill first column in descriptive_tbl with row names
descriptive_tbl_gt <- gt(descriptive_tbl, rowname_col = "nms") # create gt object with $nms as row names
indented_rows <- c("Male", "Female", "Non-binary or refused to disclose") # define rows to be indented (gender rows)
descriptive_tbl_gt <- tab_row_group(descriptive_tbl_gt, label = "Gender",  rows = indented_rows) # create gt_tbl object, label Gender rows for grouping and indenting
descriptive_tbl_gt <- tab_stub_indent(descriptive_tbl_gt, rows= indented_rows, indent = 3) # indent Gender rows
descriptive_tbl_gt <- row_group_order(descriptive_tbl_gt, groups = c(NA, "Gender")) # reorder groups with Gender being on the bottom
tab_header(descriptive_tbl_gt, "Subject characteristics")
descriptive_tbl_gt <- tab_style( # make column total in bold
descriptive_tbl_gt,
style = cell_text(weight = "bold"),
locations = cells_body(columns = Totals)
)
descriptive_tbl_gt <- tab_style( # make column name "Totals" in bold as well
descriptive_tbl_gt,
style = cell_text(weight = "bold"),
locations = cells_column_labels(columns = Totals)
)
vector_of_methods <- c("used_script_digital", "used_script_physical", "used_textbook", "used_guideline",
"used_anki_institute", "used_anki_custom") # declare variables for line graph
#options ignored: moodle quiz, moodle task, other
subset_of_interest <- survey_data[c("group", vector_of_methods)]
df_used_materials <- as.data.frame(matrix(nrow = length(groups), ncol = length(vector_of_methods)))
colnames(df_used_materials) <- vector_of_methods
rownames(df_used_materials) <- groups # creates df with columns for used studying methods and rows for groups
for (i in 1:length(vector_of_methods)){ # fill df with shares of material used by group
method <- vector_of_methods[i]
share_used_method <- aggregate(get(vector_of_methods[i]) ~ group, data=subset_of_interest, mean, na.rm = TRUE) # gives share of students who used physical scripts per group and in total
share_used_method <- share_used_method[match(groups, share_used_method$group),] # sort by group
df_used_materials[,i] <- share_used_method[, 2]
}
# convert data frame to long format to be usable in ggplot
cbind(group = rownames(df_used_materials), df_used_materials) # create rownames as expressive data column
reshape(df_used_materials, direction = "long"
figure <- ggplot(data=df_used_materials, aes(x=used_script_digital, y=percentages, group=study_material))
figure +
geom_line(aes(linetype = study_material, color = study_material), linewidth = 2)+
geom_point(aes(color = study_material), size = 2)+
expand_limits(y = c(0, 100))+
theme_bw()+
labs(color  = "preferred study material", linetype = "preferred study material",
x = "group", y = " Usage (% of students in each group)") +
ggtitle("Preferred study material by group")
ggsave(path = "H:/R/figures", filename= "preferred_study_material.png", device='png', dpi=700)
descriptive_df
required_packages <- c("gt", "readxl","tidyverse", "grDevices", "ggpubr", "effsize", "superb", "nlme")
installed_packages <- required_packages %in% rownames(installed.packages())
if (any(installed_packages == FALSE)) {
install.packages(required_packages[!installed_packages])
}
invisible(lapply(required_packages, library, character.only = TRUE))
survey_data <- tibble(read_xlsx("data/processed/anki_data_comprehensive.xlsx")) # read survey data with all five groups
# create df structure for descriptive stats.  -----------------------------
# Age is not yet analysed. Order of groups is: seminar 2022, lecture 2022, seminar 2022/23, lecture 2022/23, seminar 2023
students_per_group <- c(196, 107, 111, 266, 232) # number of students who wrote the exam in each group (excluding students absent from the exam). Data taken from score reports for each exam.
groups <- unique(survey_data$group) # vector of different groups
respondents <- table(survey_data$group)[groups] # create table of group frequencies and sort them by vector "groups". Otherwise, columns will be sorted by alphabet
response_rate <-  round(100*respondents/students_per_group, 2) # create table of response rates in percentages
gender_table <- table(survey_data$group, survey_data$gender)[groups,] # create table of declared gender per group (1 = male, 2 = female, 3 = diverse or not declared)
gender_undeclared <- respondents - rowSums(gender_table) # get no of students who did not declare gender in each group
gender_table[,3] <- gender_table[,3] + gender_undeclared # add no of undeclared genders per group to gender table. row "3" now comprises both students of answered diverse, or who did not answer the question at all.
score_percentages_means <- aggregate(score_percentage ~ group, data=survey_data, mean) # create df of mean score percentages by group
score_percentages_means_sorted <- score_percentages_means[match(groups, score_percentages_means$group), ]
score_percentages_sds <- aggregate(score_percentage ~ group, data=survey_data, sd) # create df of score percentage standard deviations by group
score_percentages_sds_sorted <- score_percentages_sds[match(groups, score_percentages_sds$group), ]
score_percentages_means_sds <- paste(round(score_percentages_means_sorted[,2], 2), "\u00B1", round(score_percentages_sds_sorted[,2], 2)) # paste means +/- sds after rounding to 2 digits
descriptive_df <- data.frame(respondents = as.vector(respondents), # create data frame with all important descriptive data
response_rate = as.vector(response_rate),
score_percentages_means = score_percentages_means_sorted[, 2],
score_percentages_sds = score_percentages_sds_sorted[, 2],
as.data.frame.matrix(gender_table))
# descriptive_matrix <- data.frame(cbind(respondents, response_rate = response_rate, gender_table, score_percentages_means_sds = score_percentages_means_sds)) # combine to table with all descriptive stats
# descriptive_matrix_df <- cbind.data.frame([respondents = respondents, response_rate = response_rate, gender_table, score_percentages_means_sds = score_percentages_means_sds], make.row.names = FALSE) # combine to table with all descriptive stats
# descriptive_df <- data.frame(descriptive_matrix) # convert matrix to df
# descriptive_df["totals", 1] <- sum(descriptive_df[, "respondents"])
descriptive_df["totals", ] <- c(sum(respondents), # add bottom row with totals over all seminar and lecture exams
100 * sum(respondents) / sum(students_per_group),
mean(survey_data$score_percentage, na.rm = TRUE),
sd(survey_data$score_percentage, na.rm = TRUE),
sum(survey_data$gender == 1, na.rm = TRUE),
sum(survey_data$gender == 2, na.rm = TRUE),
sum(respondents) - sum(survey_data$gender == 1, na.rm = TRUE) -
sum(survey_data$gender == 2, na.rm = TRUE)
)
score_percentages_means_sds <- paste(round(c(score_percentages_means_sorted[,2],mean(survey_data$score_percentage, na.rm = TRUE)), 2),
"\u00B1",
round(c(score_percentages_sds_sorted[,2],sd(survey_data$score_percentage, na.rm = TRUE)), 2)) # paste means +/- sds after rounding to 2 digits
descriptive_df_processed <- descriptive_df[,-c(3,4)] # percentage means and sds converted to char and combined as mean +- sd
descriptive_df_processed$means_and_sds <- score_percentages_means_sds
descriptive_df_processed$response_rate <- round(descriptive_df_processed$response_rate, 2)
rownames(descriptive_df_processed) <- c("Seminar 2022", "Lecture 2022", "Seminar 2022/23", "Lecture 2022/23", "Seminar 2023", "Totals")
descriptive_tbl <- as_tibble(cbind(nms = names(descriptive_df_processed), t(descriptive_df_processed))) # transpose and convert to tibble object
row_names <- c("Respondents [n]", "Response rate [%]", "Male", "Female", "Non-binary or refused to disclose", "Mean percentage of correct anwers [%] \u00B1 standard deviation") # expressive row names esp. for gender options
descriptive_tbl$nms = row_names # fill first column in descriptive_tbl with row names
descriptive_tbl_gt <- gt(descriptive_tbl, rowname_col = "nms") # create gt object with $nms as row names
indented_rows <- c("Male", "Female", "Non-binary or refused to disclose") # define rows to be indented (gender rows)
descriptive_tbl_gt <- tab_row_group(descriptive_tbl_gt, label = "Gender",  rows = indented_rows) # create gt_tbl object, label Gender rows for grouping and indenting
descriptive_tbl_gt <- tab_stub_indent(descriptive_tbl_gt, rows= indented_rows, indent = 3) # indent Gender rows
descriptive_tbl_gt <- row_group_order(descriptive_tbl_gt, groups = c(NA, "Gender")) # reorder groups with Gender being on the bottom
tab_header(descriptive_tbl_gt, "Subject characteristics")
descriptive_tbl_gt <- tab_style( # make column total in bold
descriptive_tbl_gt,
style = cell_text(weight = "bold"),
locations = cells_body(columns = Totals)
)
descriptive_tbl_gt <- tab_style( # make column name "Totals" in bold as well
descriptive_tbl_gt,
style = cell_text(weight = "bold"),
locations = cells_column_labels(columns = Totals)
)
vector_of_methods <- c("used_script_digital", "used_script_physical", "used_textbook", "used_guideline",
"used_anki_institute", "used_anki_custom") # declare variables for line graph
#options ignored: moodle quiz, moodle task, other
subset_of_interest <- survey_data[c("group", vector_of_methods)]
df_used_materials <- as.data.frame(matrix(nrow = length(groups), ncol = length(vector_of_methods)))
colnames(df_used_materials) <- vector_of_methods
rownames(df_used_materials) <- groups # creates df with columns for used studying methods and rows for groups
for (i in 1:length(vector_of_methods)){ # fill df with shares of material used by group
method <- vector_of_methods[i]
share_used_method <- aggregate(get(vector_of_methods[i]) ~ group, data=subset_of_interest, mean, na.rm = TRUE) # gives share of students who used physical scripts per group and in total
share_used_method <- share_used_method[match(groups, share_used_method$group),] # sort by group
df_used_materials[,i] <- share_used_method[, 2]
}
# convert data frame to long format to be usable in ggplot
cbind(group = rownames(df_used_materials), df_used_materials) # create rownames as expressive data column
reshape(df_used_materials, direction = "long")
?reshape
names(df_used_materials)
# convert data frame to long format to be usable in ggplot
cbind(group = rownames(df_used_materials), df_used_materials) # create rownames as expressive data column
names(df_used_materials)
df_used_materials
# convert data frame to long format to be usable in ggplot
cbind(group = rownames(df_used_materials), df_used_materials) # create rownames as expressive data column
# convert data frame to long format to be usable in ggplot
df_used_materials <- cbind(group = rownames(df_used_materials), df_used_materials) # create rownames as expressive data column
df_used_materials
c(1,2,3,4)[2:]
c(1,2,3,4)[2:3]
reshape(df_used_materials, direction = "long", varying = namesdf_used_materials[-1])
reshape(df_used_materials, direction = "long", varying = names(df_used_materials)[-1])
names(df_used_materials)[-1]
reshape(data = df_used_materials, direction = "long", varying = names(df_used_materials)[1])
names(df_used_materials)[1]
df_used_materials
reshape(data = df_used_materials, direction = "long", varying = group)
summary(Indometh)
####### install all required packages
required_packages <- c("gt", "readxl","tidyverse", "grDevices", "ggpubr", "effsize", "superb", "nlme")
installed_packages <- required_packages %in% rownames(installed.packages())
if (any(installed_packages == FALSE)) {
install.packages(required_packages[!installed_packages])
}
invisible(lapply(required_packages, library, character.only = TRUE))
survey_data <- tibble(read_xlsx("data/processed/anki_data_comprehensive.xlsx")) # read survey data with all five groups
students_per_group <- c(196, 107, 111, 266, 232) # number of students who wrote the exam in each group (excluding students absent from the exam). Data taken from score reports for each exam.
groups <- unique(survey_data$group) # vector of different groups
respondents <- table(survey_data$group)[groups] # create table of group frequencies and sort them by vector "groups". Otherwise, columns will be sorted by alphabet
response_rate <-  round(100*respondents/students_per_group, 2) # create table of response rates in percentages
gender_table <- table(survey_data$group, survey_data$gender)[groups,] # create table of declared gender per group (1 = male, 2 = female, 3 = diverse or not declared)
gender_undeclared <- respondents - rowSums(gender_table) # get no of students who did not declare gender in each group
gender_table[,3] <- gender_table[,3] + gender_undeclared # add no of undeclared genders per group to gender table. row "3" now comprises both students of answered diverse, or who did not answer the question at all.
score_percentages_means <- aggregate(score_percentage ~ group, data=survey_data, mean) # create df of mean score percentages by group
score_percentages_means_sorted <- score_percentages_means[match(groups, score_percentages_means$group), ]
score_percentages_sds <- aggregate(score_percentage ~ group, data=survey_data, sd) # create df of score percentage standard deviations by group
score_percentages_sds_sorted <- score_percentages_sds[match(groups, score_percentages_sds$group), ]
score_percentages_means_sds <- paste(round(score_percentages_means_sorted[,2], 2), "\u00B1", round(score_percentages_sds_sorted[,2], 2)) # paste means +/- sds after rounding to 2 digits
descriptive_df <- data.frame(respondents = as.vector(respondents), # create data frame with all important descriptive data
response_rate = as.vector(response_rate),
score_percentages_means = score_percentages_means_sorted[, 2],
score_percentages_sds = score_percentages_sds_sorted[, 2],
as.data.frame.matrix(gender_table))
descriptive_df["totals", ] <- c(sum(respondents), # add bottom row with totals over all seminar and lecture exams
100 * sum(respondents) / sum(students_per_group),
mean(survey_data$score_percentage, na.rm = TRUE),
sd(survey_data$score_percentage, na.rm = TRUE),
sum(survey_data$gender == 1, na.rm = TRUE),
sum(survey_data$gender == 2, na.rm = TRUE),
sum(respondents) - sum(survey_data$gender == 1, na.rm = TRUE) -
sum(survey_data$gender == 2, na.rm = TRUE)
)
score_percentages_means_sds <- paste(round(c(score_percentages_means_sorted[,2],mean(survey_data$score_percentage, na.rm = TRUE)), 2),
"\u00B1",
round(c(score_percentages_sds_sorted[,2],sd(survey_data$score_percentage, na.rm = TRUE)), 2)) # paste means +/- sds after rounding to 2 digits
descriptive_df_processed <- descriptive_df[,-c(3,4)] # percentage means and sds converted to char and combined as mean +- sd
descriptive_df_processed$means_and_sds <- score_percentages_means_sds
descriptive_df_processed$response_rate <- round(descriptive_df_processed$response_rate, 2)
rownames(descriptive_df_processed) <- c("Seminar 2022", "Lecture 2022", "Seminar 2022/23", "Lecture 2022/23", "Seminar 2023", "Totals")
descriptive_tbl <- as_tibble(cbind(nms = names(descriptive_df_processed), t(descriptive_df_processed))) # transpose and convert to tibble object
row_names <- c("Respondents [n]", "Response rate [%]", "Male", "Female", "Non-binary or refused to disclose", "Mean percentage of correct anwers [%] \u00B1 standard deviation") # expressive row names esp. for gender options
descriptive_tbl$nms = row_names # fill first column in descriptive_tbl with row names
descriptive_tbl_gt <- gt(descriptive_tbl, rowname_col = "nms") # create gt object with $nms as row names
indented_rows <- c("Male", "Female", "Non-binary or refused to disclose") # define rows to be indented (gender rows)
descriptive_tbl_gt <- tab_row_group(descriptive_tbl_gt, label = "Gender",  rows = indented_rows) # create gt_tbl object, label Gender rows for grouping and indenting
descriptive_tbl_gt <- tab_stub_indent(descriptive_tbl_gt, rows= indented_rows, indent = 3) # indent Gender rows
descriptive_tbl_gt <- row_group_order(descriptive_tbl_gt, groups = c(NA, "Gender")) # reorder groups with Gender being on the bottom
tab_header(descriptive_tbl_gt, "Subject characteristics")
descriptive_tbl_gt <- tab_style( # make column total in bold
descriptive_tbl_gt,
style = cell_text(weight = "bold"),
locations = cells_body(columns = Totals)
)
descriptive_tbl_gt <- tab_style( # make column name "Totals" in bold as well
descriptive_tbl_gt,
style = cell_text(weight = "bold"),
locations = cells_column_labels(columns = Totals)
)
vector_of_methods <- c("used_script_digital", "used_script_physical", "used_textbook", "used_guideline",
"used_anki_institute", "used_anki_custom") # declare variables for line graph
#options ignored: moodle quiz, moodle task, other
subset_of_interest <- survey_data[c("group", vector_of_methods)]
df_used_materials <- as.data.frame(matrix(nrow = length(groups), ncol = length(vector_of_methods)))
colnames(df_used_materials) <- vector_of_methods
rownames(df_used_materials) <- groups # creates df with columns for used studying methods and rows for groups
for (i in 1:length(vector_of_methods)){ # fill df with shares of material used by group
method <- vector_of_methods[i]
share_used_method <- aggregate(get(vector_of_methods[i]) ~ group, data=subset_of_interest, mean, na.rm = TRUE) # gives share of students who used physical scripts per group and in total
share_used_method <- share_used_method[match(groups, share_used_method$group),] # sort by group
df_used_materials[,i] <- share_used_method[, 2]
}
# convert data frame to long format to be usable in ggplot
df_used_materials <- cbind(group = rownames(df_used_materials), df_used_materials) # create rownames as expressive data column
reshape(data = df_used_materials, direction = "long",
varying = c("used_script_digital", "used_script_physical", "used_textbook", "used_guideline",
"used_anki_institute", "used_anki_custom"))
reshape(data = df_used_materials, direction = "long",
varying = c("used_script_digital", "used_script_physical", "used_textbook", "used_guideline",
"used_anki_institute", "used_anki_custom"), sep = "")
?reshape
reshape(data = df_used_materials, direction = "long",
varying = c("used_script_digital", "used_script_physical", "used_textbook", "used_guideline",
"used_anki_institute", "used_anki_custom"), sep = "_")
length(df_used_materials)
reshape(data = df_used_materials,
varying = 2:length(df_used_materials),
direction = "long",
v.names = df_used_materials[-1])
####### install all required packages
required_packages <- c("gt", "readxl","tidyverse", "grDevices", "ggpubr", "effsize", "superb", "nlme", "reshape2")
installed_packages <- required_packages %in% rownames(installed.packages())
if (any(installed_packages == FALSE)) {
install.packages(required_packages[!installed_packages])
}
invisible(lapply(required_packages, library, character.only = TRUE))
df_used_materials
View(df_used_materials)
# test reshape()
test_df <- data.frame(c(1,2,3), c(5,5,6))
test_df
# test reshape()
test_df <- data.frame(c("Code", "AFG", "ALB"),
c("Country", "Afghanistan", "Albania"),
c(1950, 20.249,  8.097),
c(1951, 21, 8),
c(1952, 22, 10),
c(1953, 23, 11),
c(1954, 24, 12))
test_df
reshape(d,
direction = "long",
varying = list(names(d)[3:7]),
v.names = "Value",
idvar = c("Code", "Country"),
timevar = "Year",
times = 1950:1954)
reshape(test_df,
direction = "long",
varying = list(names(d)[3:7]),
v.names = "Value",
idvar = c("Code", "Country"),
timevar = "Year",
times = 1950:1954)
reshape(test_df,
direction = "long",
varying = list(names(d)[3:7]),
v.names = "Value",
idvar = c("Code", "Country"),
timevar = "Year",
times = 1950:1954)
reshape(test_df,
direction = "long",
varying = list(names(test_df)[3:7]),
v.names = "Value",
idvar = c("Code", "Country"),
timevar = "Year",
times = 1950:1954)
countrycode
setDT
wide <- read.table(text="Code Country        1950    1951    1952    1953    1954
AFG  Afghanistan    20,249  21,352  22,532  23,557  24,555
ALB  Albania        8,097   8,986   10,058  11,123  12,246", header=TRUE, check.names=FALSE)
wide
reshape(wide,
direction = "long",
varying = list(names(wide)[3:7]),
v.names = "Value",
idvar = c("Code", "Country"),
timevar = "Year",
times = 1950:1954)
wide
wide[1,1]
wide[2,1]
list(names(df_used_materials)[1])
list(names(wide)[3:7])
reshape(data = df_used_materials,
direction = "long",
varying = list(names(df_used_materials)[-1]),
idvar = list(names(df_used_materials)[1]),
timevar = "semester")
reshape(data = df_used_materials,
direction = "long",
varying = list(names(df_used_materials)[-1]),
idvar = list(names(df_used_materials)[1]),
timevar = "semester",
times = 1:6)
reshape(data = df_used_materials,
direction = "long",
varying = list(names(df_used_materials)[-1]),
idvar = names(df_used_materials)[1],
timevar = "semester",
times = 1:6)
reshape(data = df_used_materials,
direction = "long",
varying = list(names(df_used_materials)[-1]),
idvar = names(df_used_materials)[1],
times = 1:6)
reshape(data = df_used_materials,
direction = "long",
varying = list(names(df_used_materials)[-1]),
idvar = names(df_used_materials)[1],
times = 1:6)
reshape(data = df_used_materials,
direction = "long",
varying = list(names(df_used_materials)[-1]),
idvar = names(df_used_materials)[1],
times = 1:6,
v.names = "names")
reshape(data = df_used_materials,
direction = "long",
varying = list(names(df_used_materials)[-1]),
idvar = names(df_used_materials)[1],
times = 1:5,
v.names = "share")
reshape(data = df_used_materials,
direction = "long",
varying = list(names(df_used_materials)[-1]),
idvar = names(df_used_materials)[1],
times = 1:6,
v.names = "share")
reshape(data = df_used_materials,
direction = "long",
varying = list(names(df_used_materials)[-1]),
idvar = names(df_used_materials)[1],
times = names(df_used_materials)[-1],
v.names = "share")
reshape(data = df_used_materials,
direction = "long",
varying = list(names(df_used_materials)[-1]),
idvar = names(df_used_materials)[1],
times = names(df_used_materials)[-1],
timevar = "method used",
v.names = "share")
df_used_materials_reshaped <- reshape(data = df_used_materials,
direction = "long",
varying = list(names(df_used_materials)[-1]),
idvar = names(df_used_materials)[1],
times = names(df_used_materials)[-1],
timevar = "method used",
v.names = "share")
df_used_materials_reshaped
figure <- ggplot(data=df_used_materials_reshaped, aes(x=group, y=percentages, group="method used"))
figure
figure <- ggplot(data=df_used_materials_reshaped, aes(x=group, y=share, group="method used"))
figure
figure <- ggplot(data=df_used_materials_reshaped, aes(x=group, y=share))
figure
figure +   geom_line(aes(linetype = method_used, color = method_used), linewidth = 2)
rlang::last_trace()
df_used_materials_reshaped <- reshape(data = df_used_materials,
direction = "long",
varying = list(names(df_used_materials)[-1]),
idvar = names(df_used_materials)[1],
times = names(df_used_materials)[-1],
timevar = "method_used",
v.names = "share")
figure <- ggplot(data=df_used_materials_reshaped, aes(x=group, y=share))
figure +   geom_line(aes(linetype = method_used, color = method_used), linewidth = 2)
figure + geom_point(aes(color = method_used), size = 2)
figure +   geom_line(aes(linetype = method_used)
figure +   geom_line(aes(linetype = method_used))
figure + geom_line(aes(color = method_used))
figure + geom_point(aes(color = method_used), size = 2)
figure + geom_line(aes(color = method_used), size = 2)
?geom_line
figure + geom_line(aes(group = method_used))
figure <- ggplot(data=df_used_materials_reshaped, aes(x=group, y=share))
figure + geom_point(aes(color = method_used), size = 2) +
geom_line(aes(group = method_used))
df_used_materials_reshaped
figure <- ggplot(data=df_used_materials_reshaped, aes(x=as.factor(group), y=share))
figure + geom_point(aes(color = method_used), size = 2) +
geom_line(aes(group = method_used))
figure <- ggplot(data=df_used_materials_reshaped, aes(x=factor(group), y=share))
figure + geom_point(aes(color = method_used), size = 2) +
geom_line(aes(group = method_used))
